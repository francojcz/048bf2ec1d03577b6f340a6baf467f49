<?php

/**
 * Skeleton subclass for performing query and update operations on the 'registro_uso_maquina' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 12/13/10 23:16:13
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class RegistroUsoMaquinaPeer extends BaseRegistroUsoMaquinaPeer
{
    public static function dividirTiempoAlistamientoConDeficit($deficitTiempo, $registroPrimerDia, $registroSegundoDia)
    {
        $segundosAlistamiento = $registroPrimerDia -> getRumTiempoCambioModelo() * 60;

        $tiempoATrasladar = 0;
        if ($segundosAlistamiento >= $deficitTiempo)
        {
            $tiempoATrasladar = $deficitTiempo;
        } else
        {
            $tiempoATrasladar = $segundosAlistamiento; //no deberia entrar nunca porque ya estaria el metodo completamente en el dia siguiente
        }

        // $registroPrimerDia = new RegistroUsoMaquina();

        $registroPrimerDia -> setRumTiempoCambioModelo(($segundosAlistamiento - $tiempoATrasladar) / 60);
		
//        $registroPrimerDia -> setRumHoraInicioTrabajo("23:59:59.999");
        $timestampHoraFin = $registroPrimerDia -> getRumHoraFinTrabajo('U');
        
	$registroSegundoDia -> setRumTiempoCambioModelo($tiempoATrasladar / 60);
		
        $timestampHoraInicio = $registroSegundoDia -> getRumHoraInicioTrabajo('U');
        $timestampHoraInicio += $tiempoATrasladar;
		
        $fecha = new DateTime('2001-01-01');
        $fecha->setTime(0, 0, 0);
        $fecha->add(new DateInterval('PT'.$tiempoATrasladar.'S'));
        $timezone = date_default_timezone_get();
        $fecha -> setTimezone(new DateTimeZone($timezone));
        $registroSegundoDia -> setRumHoraInicioTrabajo( $fecha-> format('H:i:s'));
		
        $timestampHoraFin = $registroSegundoDia -> getRumHoraFinTrabajo('U');
		
        $timestampHoraFin = $timestampHoraFin+($tiempoATrasladar);
        $datetimeHoraFin = new DateTime("@$timestampHoraFin");
        $timezone = date_default_timezone_get();
        $datetimeHoraFin -> setTimezone(new DateTimeZone($timezone));
        $registroSegundoDia -> setRumHoraFinTrabajo($datetimeHoraFin -> format('H:i:s'));

        $deficitTiempo = $deficitTiempo - $tiempoATrasladar;
		
        return array($registroPrimerDia, $registroSegundoDia, $deficitTiempo);
    }

    public static function dividirTiempoAlistamientoSinDeficit($deficitTiempo, $registroPrimerDia, $registroSegundoDia)
    {
        $segundosAlistamiento = $registroPrimerDia -> getRumTiempoCambioModelo() * 60;

        $tiempoATrasladar = 0;
        if ($segundosAlistamiento >= $deficitTiempo)
        {
            $tiempoATrasladar = $deficitTiempo;
        } else
        {
            $tiempoATrasladar = $segundosAlistamiento;
        }

        // $registroPrimerDia = new RegistroUsoMaquina();

        $registroPrimerDia -> setRumTiempoCambioModelo(($segundosAlistamiento - $tiempoATrasladar) / 60);

        $timestampHoraInicio = $registroPrimerDia -> getRumHoraInicioTrabajo('U');
        $timestampHoraInicio -= $tiempoATrasladar;
        $datetimeHoraInicio = new DateTime("@$timestampHoraInicio");
        $timezone = date_default_timezone_get();
        $datetimeHoraInicio -> setTimezone(new DateTimeZone($timezone));
        $registroPrimerDia -> setRumHoraInicioTrabajo($datetimeHoraInicio -> format('H:i:s'));

        $timestampHoraFin = $registroPrimerDia -> getRumHoraFinTrabajo('U');

        $registroSegundoDia -> setRumTiempoCambioModelo($tiempoATrasladar / 60);

        $timestampHoraInicio = $registroSegundoDia -> getRumHoraInicioTrabajo('U');
        $timestampHoraInicio += $tiempoATrasladar;
        $datetimeHoraInicio = new DateTime("@$timestampHoraInicio");
        $timezone = date_default_timezone_get();
        $datetimeHoraInicio -> setTimezone(new DateTimeZone($timezone));
        $registroSegundoDia -> setRumHoraInicioTrabajo($datetimeHoraInicio -> format('H:i:s'));

        $timestampHoraFin = $registroSegundoDia -> getRumHoraFinTrabajo('U');
        $timestampHoraFin += $tiempoATrasladar;
        $datetimeHoraFin = new DateTime("@$timestampHoraFin");
        $timezone = date_default_timezone_get();
        $datetimeHoraFin -> setTimezone(new DateTimeZone($timezone));
        $registroSegundoDia -> setRumHoraFinTrabajo($datetimeHoraFin -> format('H:i:s'));

        $deficitTiempo = $deficitTiempo - $tiempoATrasladar;

        return array($registroPrimerDia, $registroSegundoDia, $deficitTiempo);
    }

    public static function dividirPerdidaAlistamiento($deficitTiempo, $registroPrimerDia, $registroSegundoDia)
    {
        $segundosPerdidaAlistamiento = $registroPrimerDia -> calcularPerdidaCambioMetodoAjusteMinutos() * 60;

        $tiempoATrasladar = 0;
        if ($segundosPerdidaAlistamiento >= $deficitTiempo)
        {
            $tiempoATrasladar = $deficitTiempo;
        } else
        {
            $tiempoATrasladar = $segundosPerdidaAlistamiento;
        }

        // $registroPrimerDia = new RegistroUsoMaquina();
        $timestampHoraInicio = $registroPrimerDia -> getRumHoraInicioTrabajo('U');
        $timestampHoraInicio -= $tiempoATrasladar;
        $datetimeHoraInicio = new DateTime("@$timestampHoraInicio");
        $timezone = date_default_timezone_get();
        $datetimeHoraInicio -> setTimezone(new DateTimeZone($timezone));
        $registroPrimerDia -> setRumHoraInicioTrabajo($datetimeHoraInicio -> format('H:i:s'));

        $timestampHoraFin = $registroPrimerDia -> getRumHoraFinTrabajo('U');

        $timestampHoraInicio = $registroSegundoDia -> getRumHoraInicioTrabajo('U');
        $timestampHoraInicio += $tiempoATrasladar;
        $datetimeHoraInicio = new DateTime("@$timestampHoraInicio");
        $timezone = date_default_timezone_get();
        $datetimeHoraInicio -> setTimezone(new DateTimeZone($timezone));
        $registroSegundoDia -> setRumHoraInicioTrabajo($datetimeHoraInicio -> format('H:i:s'));

        $timestampHoraFin = $registroSegundoDia -> getRumHoraFinTrabajo('U');
        $timestampHoraFin += $tiempoATrasladar;
        $datetimeHoraFin = new DateTime("@$timestampHoraFin");
        $timezone = date_default_timezone_get();
        $datetimeHoraFin -> setTimezone(new DateTimeZone($timezone));
        $registroSegundoDia -> setRumHoraFinTrabajo($datetimeHoraFin -> format('H:i:s'));

        $deficitTiempo = $deficitTiempo - $tiempoATrasladar;

        return array($registroPrimerDia, $registroSegundoDia, $deficitTiempo);
    }

    public static function dividirRetrabajosSystemSuitability($deficitTiempo, $registroPrimerDia, $registroSegundoDia, $tiempoInyeccion)
    {
        // $registroPrimerDia = new RegistroUsoMaquina();
        $segundosSistema = ($registroPrimerDia -> getRumTiempoCorridaSistema() + $tiempoInyeccion) * $registroPrimerDia -> getRumNumInyeccionEstandarPer() * 60;

        $tiempoATrasladar = 0;
        if ($segundosSistema >= $deficitTiempo)
        {
            $tiempoATrasladar = $deficitTiempo;
        } else
        {
            $tiempoATrasladar = $segundosSistema;
        }

        $denominador = ($registroPrimerDia -> getRumTiempoCorridaSistema() + $tiempoInyeccion) * 60;
        if ($denominador == 0)
        {
            return array($registroPrimerDia, $registroSegundoDia, $deficitTiempo);
        }

        $inyeccionesATrasladar = $tiempoATrasladar / $denominador;
        $registroPrimerDia -> setRumNumInyeccionEstandarPer($registroPrimerDia -> getRumNumInyeccionEstandarPer() - $inyeccionesATrasladar);

        $registroSegundoDia -> setRumNumInyeccionEstandarPer($inyeccionesATrasladar);
        $registroSegundoDia -> setRumTiempoCorridaSistema($registroPrimerDia -> getRumTiempoCorridaSistema());
        $timestampHoraFin = $registroSegundoDia -> getRumHoraFinTrabajo('U');
        $timestampHoraFin = $timestampHoraFin + $tiempoATrasladar;
        $datetimeHoraFin = new DateTime('@' . round($timestampHoraFin, 0));
        $timezone = date_default_timezone_get();
        $datetimeHoraFin -> setTimezone(new DateTimeZone($timezone));
        $registroSegundoDia -> setRumHoraFinTrabajo($datetimeHoraFin -> format('H:i:s'));

        $deficitTiempo = $deficitTiempo - $tiempoATrasladar;

        return array($registroPrimerDia, $registroSegundoDia, $deficitTiempo);
    }

    public static function dividirSystemSuitability($deficitTiempo, $registroPrimerDia, $registroSegundoDia, $tiempoInyeccion)
    {
        // $registroPrimerDia = new RegistroUsoMaquina();
        $segundosSistema = ($registroPrimerDia -> getRumTiempoCorridaSistema() + $tiempoInyeccion) * $registroPrimerDia -> getRumNumeroInyeccionEstandar() * 60;

        $tiempoATrasladar = 0;
        if ($segundosSistema >= $deficitTiempo)
        {
            $tiempoATrasladar = $deficitTiempo;
        } else
        {
            $tiempoATrasladar = $segundosSistema;
        }

        $denominador = ($registroPrimerDia -> getRumTiempoCorridaSistema() + $tiempoInyeccion) * 60;
        if ($denominador == 0)
        {
            return array($registroPrimerDia, $registroSegundoDia, $deficitTiempo);
        }

        $inyeccionesATrasladar = $tiempoATrasladar / $denominador;
        $registroPrimerDia -> setRumNumeroInyeccionEstandar($registroPrimerDia -> getRumNumeroInyeccionEstandar() - $inyeccionesATrasladar);

        $registroSegundoDia -> setRumNumeroInyeccionEstandar($inyeccionesATrasladar);
        $registroSegundoDia -> setRumTiempoCorridaSistema($registroPrimerDia -> getRumTiempoCorridaSistema());
        $timestampHoraFin = $registroSegundoDia -> getRumHoraFinTrabajo('U');
        $timestampHoraFin = $timestampHoraFin + $tiempoATrasladar;
        $datetimeHoraFin = new DateTime('@' . round($timestampHoraFin, 0));
        $timezone = date_default_timezone_get();
        $datetimeHoraFin -> setTimezone(new DateTimeZone($timezone));
        $registroSegundoDia -> setRumHoraFinTrabajo($datetimeHoraFin -> format('H:i:s'));

        $deficitTiempo = $deficitTiempo - $tiempoATrasladar;

        return array($registroPrimerDia, $registroSegundoDia, $deficitTiempo);
    }

    public static function dividirRetrabajosCurvasCalibracion($deficitTiempo, $registroPrimerDia, $registroSegundoDia, $tiempoInyeccion, $numero)
    {
        // $registroPrimerDia = new RegistroUsoMaquina();
        $segundosCurva = ($registroPrimerDia -> getRumTiempoCorridaCurvas() + $tiempoInyeccion) * eval('return $registroPrimerDia->getRumNumInyeccionEstandar' . $numero . 'Pe();') * 60;

        $tiempoATrasladar = 0;
        if ($segundosCurva >= $deficitTiempo)
        {
            $tiempoATrasladar = $deficitTiempo;
        } else
        {
            $tiempoATrasladar = $segundosCurva;
        }

        $denominador = ($registroPrimerDia -> getRumTiempoCorridaCurvas() + $tiempoInyeccion) * 60;
        if ($denominador == 0)
        {
            return array($registroPrimerDia, $registroSegundoDia, $deficitTiempo);
        }

        $inyeccionesATrasladar = $tiempoATrasladar / $denominador;
        eval('$registroPrimerDia->setRumNumInyeccionEstandar' . $numero . 'Pe($registroPrimerDia->getRumNumInyeccionEstandar' . $numero . 'Pe()-$inyeccionesATrasladar);');

        eval('$registroSegundoDia->setRumNumInyeccionEstandar' . $numero . 'Pe(' . $inyeccionesATrasladar . ');');
        $registroSegundoDia -> setRumTiempoCorridaCurvas($registroPrimerDia -> getRumTiempoCorridaCurvas());
        $timestampHoraFin = $registroSegundoDia -> getRumHoraFinTrabajo('U');
        $timestampHoraFin = $timestampHoraFin + $tiempoATrasladar;
        $datetimeHoraFin = new DateTime('@' . round($timestampHoraFin, 0));
        $timezone = date_default_timezone_get();
        $datetimeHoraFin -> setTimezone(new DateTimeZone($timezone));
        $registroSegundoDia -> setRumHoraFinTrabajo($datetimeHoraFin -> format('H:i:s'));

        $deficitTiempo = $deficitTiempo - $tiempoATrasladar;

        return array($registroPrimerDia, $registroSegundoDia, $deficitTiempo);
    }

    public static function dividirCurvasCalibracion($deficitTiempo, $registroPrimerDia, $registroSegundoDia, $tiempoInyeccion, $numero)
    {
        // $registroPrimerDia = new RegistroUsoMaquina();
        $segundosCurva = ($registroPrimerDia -> getRumTiempoCorridaCurvas() + $tiempoInyeccion) * eval('return $registroPrimerDia->getRumNumeroInyeccionEstandar' . $numero . '();') * 60;

        $tiempoATrasladar = 0;
        if ($segundosCurva >= $deficitTiempo)
        {
            $tiempoATrasladar = $deficitTiempo;
        } else
        {
            $tiempoATrasladar = $segundosCurva;
        }

        $denominador = ($registroPrimerDia -> getRumTiempoCorridaCurvas() + $tiempoInyeccion) * 60;
        if ($denominador == 0)
        {
            return array($registroPrimerDia, $registroSegundoDia, $deficitTiempo);
        }

        $inyeccionesATrasladar = $tiempoATrasladar / $denominador;
        eval('$registroPrimerDia->setRumNumeroInyeccionEstandar' . $numero . '($registroPrimerDia->getRumNumeroInyeccionEstandar' . $numero . '()-$inyeccionesATrasladar);');

        eval('$registroSegundoDia->setRumNumeroInyeccionEstandar' . $numero . '(' . $inyeccionesATrasladar . ');');
        $registroSegundoDia -> setRumTiempoCorridaCurvas($registroPrimerDia -> getRumTiempoCorridaCurvas());
        $timestampHoraFin = $registroSegundoDia -> getRumHoraFinTrabajo('U');
        $timestampHoraFin = $timestampHoraFin + $tiempoATrasladar;
        $datetimeHoraFin = new DateTime('@' . round($timestampHoraFin, 0));
        $timezone = date_default_timezone_get();
        $datetimeHoraFin -> setTimezone(new DateTimeZone($timezone));
        $registroSegundoDia -> setRumHoraFinTrabajo($datetimeHoraFin -> format('H:i:s'));

        $deficitTiempo = $deficitTiempo - $tiempoATrasladar;

        return array($registroPrimerDia, $registroSegundoDia, $deficitTiempo);
    }

    public static function dividirFallas($deficitTiempo, $registroPrimerDia, $registroSegundoDia)
    {
        $segundosFallas = $registroPrimerDia -> getRumFallas() * 60;

        $tiempoATrasladar = 0;
        if ($segundosFallas >= $deficitTiempo)
        {
            $tiempoATrasladar = $deficitTiempo;
        } else
        {
            $tiempoATrasladar = $segundosFallas;
        }
        $registroPrimerDia -> setRumFallas($registroPrimerDia -> getRumFallas() - ($tiempoATrasladar / 60));
        $registroSegundoDia -> setRumFallas($tiempoATrasladar / 60);
        $deficitTiempo = $deficitTiempo - $tiempoATrasladar;

        return array($registroPrimerDia, $registroSegundoDia, $deficitTiempo);
    }

    public static function dividirParosMenores($deficitTiempo, $registroPrimerDia, $registroSegundoDia, $inyeccionesEstandarPromedio = 8)
    {
        $registroSegundoDia -> setRumHoraInicioTrabajo('00:00:00');

        $segundosParosMenores = $registroPrimerDia -> calcularParosMenoresMinutosConEvento($inyeccionesEstandarPromedio, $registroPrimerDia->getRumCodigo()) * 60;

        $tiempoATrasladar = 0;
        if ($segundosParosMenores >= $deficitTiempo)
        {
            $tiempoATrasladar = $deficitTiempo;
        } else
        {
            $tiempoATrasladar = $segundosParosMenores;
        }
        // $registro = new RegistroUsoMaquina();
        $timestampHoraFin = $registroPrimerDia -> getRumHoraFinTrabajo('U');
        $timestampHoraFin = $timestampHoraFin - $tiempoATrasladar;
        $datetimeHoraFin = new DateTime('@' . round($timestampHoraFin, 0));
        $timezone = date_default_timezone_get();
        $datetimeHoraFin -> setTimezone(new DateTimeZone($timezone));
        $registroPrimerDia -> setRumHoraFinTrabajo($datetimeHoraFin -> format('H:i:s'));

        $datetimeHoraFinSegundoDia = new DateTime('@' . round($tiempoATrasladar, 0));
        $registroSegundoDia -> setRumHoraFinTrabajo($datetimeHoraFinSegundoDia -> format('H:i:s'));

        $deficitTiempo = $deficitTiempo - $tiempoATrasladar;

        return array($registroPrimerDia, $registroSegundoDia, $deficitTiempo);
    }

    public static function dividirRetrabajosMuestras($deficitTiempo, $registroPrimerDia, $registroSegundoDia, $tiempoInyeccion, $parametro1, $parametro2, $parametro3)
    {
        $tiempoCorrida = eval('return $registroPrimerDia -> get' . $parametro1 . '();');
        $numeroMuestrasRetrabajo = eval('return $registroPrimerDia -> get' . $parametro2 . '();');
        $numeroInyeccionesPorMuestraRetrabajo = eval('return $registroPrimerDia -> get' . $parametro3 . '();');
        $segundosRetrabajos = (($tiempoCorrida + $tiempoInyeccion) * $numeroMuestrasRetrabajo * $numeroInyeccionesPorMuestraRetrabajo) * 60;
        $tiempoATrasladar = 0;
        if ($segundosRetrabajos >= $deficitTiempo)
        {
            $tiempoATrasladar = $deficitTiempo;
        } else
        {
            $tiempoATrasladar = $segundosRetrabajos;
        }

        $denominador = (($tiempoCorrida + $tiempoInyeccion) * $numeroInyeccionesPorMuestraRetrabajo * 60);

        if ($denominador == 0)
        {
            return array($registroPrimerDia, $registroSegundoDia, $deficitTiempo);
        }

        // $registro = new RegistroUsoMaquina();
        $numeroMuestrasATrasladar = $tiempoATrasladar / $denominador;
        eval('$registroPrimerDia -> set' . $parametro2 . '($numeroMuestrasRetrabajo - $numeroMuestrasATrasladar);');

        eval('$registroSegundoDia -> set' . $parametro1 . '($tiempoCorrida);');
        eval('$registroSegundoDia -> set' . $parametro2 . '($numeroMuestrasATrasladar);');
        eval('$registroSegundoDia -> set' . $parametro3 . '($numeroInyeccionesPorMuestraRetrabajo);');
        $timestampHoraFin = $registroSegundoDia -> getRumHoraFinTrabajo('U');
        $timestampHoraFin = $timestampHoraFin + $tiempoATrasladar;
        $datetimeHoraFin = new DateTime('@' . round($timestampHoraFin, 0));
        $timezone = date_default_timezone_get();
        $datetimeHoraFin -> setTimezone(new DateTimeZone($timezone));
        $registroSegundoDia -> setRumHoraFinTrabajo($datetimeHoraFin -> format('H:i:s'));

        $deficitTiempo = $deficitTiempo - $tiempoATrasladar;

        return array($registroPrimerDia, $registroSegundoDia, $deficitTiempo);
    }

    public static function dividirMuestras($deficitTiempo, $registroPrimerDia, $registroSegundoDia, $tiempoInyeccion, $parametro1, $parametro2, $parametro3)
    {
        $tiempoCorrida = eval('return $registroPrimerDia -> get' . $parametro1 . '();');
        $numeroMuestras = eval('return $registroPrimerDia -> get' . $parametro2 . '();');
        $numeroInyeccionesPorMuestra = eval('return $registroPrimerDia -> get' . $parametro3 . '();');
        $segundosMuestras = ($tiempoCorrida + $tiempoInyeccion) * $numeroMuestras * $numeroInyeccionesPorMuestra * 60;
        $tiempoATrasladar = 0;
        if ($segundosMuestras >= $deficitTiempo)
        {
            $tiempoATrasladar = $deficitTiempo;
        } else
        {
            $tiempoATrasladar = $segundosMuestras;
        }        
        $denominador = (($tiempoCorrida + $tiempoInyeccion) * $numeroInyeccionesPorMuestra * 60);
        if ($denominador == 0)
        {
            return array($registroPrimerDia, $registroSegundoDia, $deficitTiempo);
        }
        $numeroMuestrasATrasladar = $tiempoATrasladar / $denominador;
        eval('$registroPrimerDia -> set' . $parametro2 . '($numeroMuestras - $numeroMuestrasATrasladar);');
        eval('$registroSegundoDia -> set' . $parametro1 . '($tiempoCorrida);');
        eval('$registroSegundoDia -> set' . $parametro2 . '($numeroMuestrasATrasladar);');
        eval('$registroSegundoDia -> set' . $parametro3 . '($numeroInyeccionesPorMuestra);');
        $timestampHoraFin = $registroSegundoDia -> getRumHoraFinTrabajo('U');
        $timestampHoraFin = $timestampHoraFin + $tiempoATrasladar;
        $datetimeHoraFin = new DateTime('@' . round($timestampHoraFin, 0));
        $timezone = date_default_timezone_get();
        $datetimeHoraFin -> setTimezone(new DateTimeZone($timezone));
        $registroSegundoDia -> setRumHoraFinTrabajo($datetimeHoraFin -> format('H:i:s'));

        $deficitTiempo = $deficitTiempo - $tiempoATrasladar;

        return array($registroPrimerDia, $registroSegundoDia, $deficitTiempo);
    }

    public static function calcularEfectividadGlobalEquipo($disponibilidad, $eficiencia, $calidad)
    {
        $OEE = $disponibilidad;
        $OEE *= $eficiencia;
        $OEE *= $calidad;
        $OEE /= 10000;
        return $OEE;
    }

    public static function calcularCalidad($numeroInyecciones, $numeroReinyecciones)
    {
        $numeroTotalInyecciones = $numeroInyecciones + $numeroReinyecciones;
        $calidad = 0;
        if ($numeroTotalInyecciones != 0)
        {
            $calidad = 100 * ($numeroInyecciones / $numeroTotalInyecciones);
        }
        return $calidad;
    }

    public static function calcularEficiencia($TP, $TO)
    {
        $eficiencia = 0;
        if ($TO != 0)
        {
            $eficiencia = 100 * ($TP / $TO);
        }
        return $eficiencia;
    }

    public static function calcularDisponibilidad($TO, $TF)
    {
        $disponibilidad = 0;
        if ($TF != 0)
        {
            $disponibilidad = 100 * ($TO / $TF);
        }
        return $disponibilidad;
    }

    public static function calcularTiempoDisponibleMinutos($codigoMaquina, $fecha, $inyeccionesEstandarPromedio, $tiempoExcedente = FALSE)
    {
        $criteria = new Criteria();
        $criteria -> add(RegistroUsoMaquinaPeer::RUM_MAQ_CODIGO, $codigoMaquina);
        $criteria -> add(RegistroUsoMaquinaPeer::RUM_FECHA, $fecha);
        $criteria -> add(RegistroUsoMaquinaPeer::RUM_ELIMINADO, false);
        $criteria -> addAscendingOrderByColumn(RegistroUsoMaquinaPeer::RUM_TIEMPO_ENTRE_MODELO);
        $registros = RegistroUsoMaquinaPeer::doSelect($criteria);

        $TNP = 0;
        $TPP = 0;
        $TPNP = 0;
        $TO = 0;
        $minutosActuales = 0;
        foreach ($registros as $registro)
        {
            $TNP += round($registro -> getRumTiempoEntreModelo('H') * 60 + $registro -> getRumTiempoEntreModelo('i') + ($registro -> getRumTiempoEntreModelo('s') / 60), 2);
            $TNP -= $minutosActuales;

            $TPP += $registro -> getRumTiempoCambioModelo();            

            $TO += $registro -> calcularTOMinutos($inyeccionesEstandarPromedio);
            
            $TPNP += $registro -> calcularPerdidaCambioMetodoAjusteMinutos();
            $TPNP += $registro -> calcularParosMenoresMinutosConEvento($inyeccionesEstandarPromedio, $registro->getRumCodigo());
            $TPNP += $registro -> calcularRetrabajosMinutos($inyeccionesEstandarPromedio);
//            $TPNP += $registro -> getRumFallas();
            //Cambios: 24 de febrero de 2014
            //Se suma la duración de los eventos a los TPNP
            $criteria = new Criteria();
            $criteria->add(EventoEnRegistroPeer::EVRG_RUM_CODIGO, $registro->getRumCodigo());
            $eventos_rum = EventoEnRegistroPeer::doSelect($criteria);
            foreach ($eventos_rum as $evento_rum) {                
                $TPNP += round($evento_rum->getEvrgDuracion(), 2);
            }
            $minutosActuales = ($registro -> getRumHoraFinTrabajo('H') * 60) + $registro -> getRumHoraFinTrabajo('i') + ($registro -> getRumHoraFinTrabajo('s') / 60);
        }

        $tiempoDisponible = 1440 - $TNP - $TPP - $TPNP - $TO;

        if ($tiempoExcedente || $tiempoDisponible >= 0)
        {
//            return array(round($tiempoDisponible), $TNP, $TPP, $TPNP, $TO);
            return $tiempoDisponible;
        } else
        {
//            return array(0, 0, 0, 0, 0);
            return 0;
        }
    }

    public static function calcularTiempoDisponibleHoras($codigoMaquina, $fecha, $inyeccionesEstandarPromedio, $rum_codigo, $tiempoExcedente = FALSE)
    {
        $criteria = new Criteria();
        $criteria -> add(RegistroUsoMaquinaPeer::RUM_MAQ_CODIGO, $codigoMaquina);
        $criteria -> add(RegistroUsoMaquinaPeer::RUM_FECHA, $fecha);
        $criteria -> add(RegistroUsoMaquinaPeer::RUM_ELIMINADO, false);
        $criteria -> addAscendingOrderByColumn(RegistroUsoMaquinaPeer::RUM_TIEMPO_ENTRE_MODELO);
        $registros = RegistroUsoMaquinaPeer::doSelect($criteria);

        $TNP = 0;
        $TPP = 0;
        $TPNP = 0;
        $TO = 0;
        $minutosActuales = 0;
        foreach ($registros as $registro)
        {
            $TNP += round($registro -> getRumTiempoEntreModelo('H') * 60 + $registro -> getRumTiempoEntreModelo('i') + ($registro -> getRumTiempoEntreModelo('s') / 60), 2);
            $TNP -= $minutosActuales;
            $TPP += $registro -> getRumTiempoCambioModelo();           
            $TO += $registro -> calcularTOMinutos($inyeccionesEstandarPromedio);
            
            $TPNP += $registro -> calcularPerdidaCambioMetodoAjusteMinutos();
            $TPNP += $registro -> calcularParosMenoresMinutosConEvento($inyeccionesEstandarPromedio, $registro->getRumCodigo());
            $TPNP += $registro -> calcularRetrabajosMinutos($inyeccionesEstandarPromedio);
            $TPNP += $registro -> getRumFallas();            
            //Cambios: 24 de febrero de 2014
            //Se suma la duración de los eventos a los TPNP
            $criteria = new Criteria();
            $criteria->add(EventoEnRegistroPeer::EVRG_RUM_CODIGO, $registro->getRumCodigo());
            $eventos_rum = EventoEnRegistroPeer::doSelect($criteria);
            foreach ($eventos_rum as $evento_rum) {                
                $TPNP += round($evento_rum->getEvrgDuracion(), 2);
            }

            $minutosActuales = ($registro -> getRumHoraFinTrabajo('H') * 60) + $registro -> getRumHoraFinTrabajo('i') + ($registro -> getRumHoraFinTrabajo('s') / 60);
        }

        $TNP = $TNP / 60;
        $TPP = $TPP / 60;
        $TPNP = $TPNP / 60;
        $TO = $TO / 60;

        $tiempoDisponible = 24 - $TNP - $TPP - $TPNP - $TO;

        if ($tiempoExcedente || $tiempoDisponible >= 0)
        {
            return $tiempoDisponible;
        } else
        {
            return 0;
        }
    }

    public static function contarReinyeccionesMes($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        $registros = RegistroUsoMaquinaPeer::consultarRegistrosMes($codigoMaquina, $mes, $año, $params);

        foreach ($registros as $registro)
        {
            //						$registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> contarNumeroTotalReinyecciones($inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function contarReinyeccionesDia($codigoMaquina, $dia, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        $registros = RegistroUsoMaquinaPeer::consultarRegistrosDia($codigoMaquina, $dia, $mes, $año, $params);

        foreach ($registros as $registro)
        {
            //						$registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> contarNumeroTotalReinyecciones($inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function contarInyeccionesObligatoriasMes($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        $registros = RegistroUsoMaquinaPeer::consultarRegistrosMes($codigoMaquina, $mes, $año, $params);

        foreach ($registros as $registro)
        {
            //			$registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> contarNumeroInyeccionesObligatorias($inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function contarInyeccionesObligatoriasDia($codigoMaquina, $dia, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        $registros = RegistroUsoMaquinaPeer::consultarRegistrosDia($codigoMaquina, $dia, $mes, $año, $params);

        foreach ($registros as $registro)
        {
            //			$registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> contarNumeroInyeccionesObligatorias($inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function contarMuestrasReanalizadas($registros)
    {
        $sumatoria = 0;

        foreach ($registros as $registro)
        {
            //      $registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> contarNumeroMuestrasReAnalizadas();
        }

        return $sumatoria;
    }

    public static function contarMuestrasReanalizadasMes($codigoMaquina, $mes, $año, $params)
    {
        $sumatoria = 0;

        $registros = RegistroUsoMaquinaPeer::consultarRegistrosMes($codigoMaquina, $mes, $año, $params);

        foreach ($registros as $registro)
        {
            //			$registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> contarNumeroMuestrasReAnalizadas();
        }

        return $sumatoria;
    }

    public static function contarMuestrasAnalizadas($registros)
    {
        $sumatoria = 0;

        foreach ($registros as $registro)
        {
            //                  $registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> contarNumeroMuestrasProgramadas();
        }

        return $sumatoria;
    }

    public static function contarMuestrasAnalizadasMes($codigoMaquina, $mes, $año, $params)
    {
        $sumatoria = 0;

        $registros = RegistroUsoMaquinaPeer::consultarRegistrosMes($codigoMaquina, $mes, $año, $params);

        foreach ($registros as $registro)
        {
            //									$registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> contarNumeroMuestrasProgramadas();
        }

        return $sumatoria;
    }

    public static function contarPerdidasVelocidadAñoEnDias($codigoMaquina, $año, $params, $inyeccionesEstandarPromedio)
    {
        return (RegistroUsoMaquinaPeer::contarPerdidasVelocidadAñoEnHoras($codigoMaquina, $año, $params, $inyeccionesEstandarPromedio) / 24);
    }

    public static function contarPerdidasVelocidadAñoEnHoras($codigoMaquina, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        for ($i = 1; $i <= 12; $i++)
        {
            $sumatoria += RegistroUsoMaquinaPeer::contarPerdidasVelocidadMesEnHoras($codigoMaquina, $i, $año, $params, $inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function contarPerdidasVelocidadMesEnDias($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        return (RegistroUsoMaquinaPeer::contarPerdidasVelocidadMesEnHoras($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio) / 24);
    }

    public static function contarPerdidasVelocidadMesEnHoras($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        $registros = RegistroUsoMaquinaPeer::consultarRegistrosMes($codigoMaquina, $mes, $año, $params);

        foreach ($registros as $registro)
        {
            //			                        $registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> calcularPerdidasVelocidadMinutos($inyeccionesEstandarPromedio);
        }

        return ($sumatoria / 60);
    }

    public static function contarPerdidasVelocidadEnMinutos($registros, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        foreach ($registros as $registro)
        {
            //			                        $registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> calcularPerdidasVelocidadMinutos($inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function contarRetrabajosAñoEnDias($codigoMaquina, $año, $params, $inyeccionesEstandarPromedio)
    {
        return (RegistroUsoMaquinaPeer::contarRetrabajosAñoEnHoras($codigoMaquina, $año, $params, $inyeccionesEstandarPromedio) / 24);
    }

    public static function contarRetrabajosAñoEnHoras($codigoMaquina, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        for ($i = 1; $i <= 12; $i++)
        {
            $sumatoria += RegistroUsoMaquinaPeer::contarRetrabajosMesEnHoras($codigoMaquina, $i, $año, $params, $inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function contarRetrabajosMesEnDias($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        return (RegistroUsoMaquinaPeer::contarRetrabajosMesEnHoras($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio) / 24);
    }

    public static function contarRetrabajosMesEnHoras($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        $registros = RegistroUsoMaquinaPeer::consultarRegistrosMes($codigoMaquina, $mes, $año, $params);

        foreach ($registros as $registro)
        {
            //									            $registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> calcularRetrabajosMinutos($inyeccionesEstandarPromedio);
        }

        return ($sumatoria / 60);
    }

    public static function contarRetrabajosEnMinutos($registros, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        foreach ($registros as $registro)
        {
            //						            $registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> calcularRetrabajosMinutos($inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function contarParosMenoresIncluyendoCambioMetodoAñoEnDias($codigoMaquina, $año, $params, $inyeccionesEstandarPromedio)
    {
        return (RegistroUsoMaquinaPeer::contarParosMenoresIncluyendoCambioMetodoAñoEnHoras($codigoMaquina, $año, $params, $inyeccionesEstandarPromedio) / 24);
    }

    public static function contarParosMenoresIncluyendoCambioMetodoAñoEnHoras($codigoMaquina, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        for ($i = 1; $i <= 12; $i++)
        {
            $sumatoria += RegistroUsoMaquinaPeer::contarParosMenoresIncluyendoCambioMetodoMesEnHoras($codigoMaquina, $i, $año, $params, $inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function contarParosMenoresIncluyendoCambioMetodoMesEnDias($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        return (RegistroUsoMaquinaPeer::contarParosMenoresIncluyendoCambioMetodoMesEnHoras($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio) / 24);
    }

    public static function contarParosMenoresIncluyendoCambioMetodoMesEnHoras($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        $registros = RegistroUsoMaquinaPeer::consultarRegistrosMes($codigoMaquina, $mes, $año, $params);

        foreach ($registros as $registro)
        {
            //            $registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> calcularParosMenoresIncluyendoCambioMetodoMinutos($inyeccionesEstandarPromedio);
        }

        return ($sumatoria / 60);
    }

    public static function contarParosMenoresAñoEnHoras($codigoMaquina, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        for ($i = 1; $i <= 12; $i++)
        {
            $sumatoria += RegistroUsoMaquinaPeer::contarParosMenoresMesEnHoras($codigoMaquina, $i, $año, $params, $inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    // Cuenta los paros menores para un conjunto dado de registros de corridas
    public static function contarParosMenoresEnMinutos($registros, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        foreach ($registros as $registro)
        {
            //			            $registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> calcularParosMenoresMinutos($inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function contarParosMenoresDiaEnMinutos($registros, $inyeccionesEstandarPromedio)
    {
        $sumatoria = RegistroUsoMaquinaPeer::contarParosMenoresEnMinutos($registros, $inyeccionesEstandarPromedio);

        foreach ($registros as $registro)
        {
            //			            $registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> calcularPerdidaCambioMetodoAjusteMinutos();
        }

        return $sumatoria;
    }

    public static function contarParosMenoresMesEnDias($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        return (RegistroUsoMaquinaPeer::contarParosMenoresMesEnHoras($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio) / 24);
    }

    public static function contarParosMenoresMesEnHoras($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        $registros = RegistroUsoMaquinaPeer::consultarRegistrosMes($codigoMaquina, $mes, $año, $params);

        foreach ($registros as $registro)
        {
            //						$registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> calcularParosMenoresMinutos($inyeccionesEstandarPromedio);
            $sumatoria += $registro -> calcularPerdidaCambioMetodoAjusteMinutos();
        }

        return ($sumatoria / 60);
    }

    public static function contarFallasAñoEnDias($codigoMaquina, $año, $params)
    {
        return (RegistroUsoMaquinaPeer::contarFallasAñoEnHoras($codigoMaquina, $año, $params) / 24);
    }

    public static function contarFallasAñoEnHoras($codigoMaquina, $año, $params)
    {
        $sumatoria = 0;

        for ($i = 1; $i <= 12; $i++)
        {
            $sumatoria += RegistroUsoMaquinaPeer::contarFallasMesEnHoras($codigoMaquina, $i, $año, $params);
        }

        return $sumatoria;
    }

    public static function contarFallasMesEnDias($codigoMaquina, $mes, $año, $params)
    {
        return (RegistroUsoMaquinaPeer::contarFallasMesEnHoras($codigoMaquina, $mes, $año, $params) / 24);
    }

    public static function contarFallasMesEnHoras($codigoMaquina, $mes, $año, $params)
    {
        $sumatoria = 0;

        $registros = RegistroUsoMaquinaPeer::consultarRegistrosMes($codigoMaquina, $mes, $año, $params);

        foreach ($registros as $registro)
        {
            //			$registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> getRumFallas();
        }

        return ($sumatoria / 60);
    }

    public static function contarFallasEnMinutos($registros, $params)
    {
        $sumatoria = 0;

        foreach ($registros as $registro)
        {
            //      $registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> getRumFallas();
        }

        return $sumatoria;
    }

    public static function calcularProductividadTotalEfectiva($aprovechamiento, $efectividadGlobalEquipo)
    {
        $PTEE = $aprovechamiento;
        $PTEE *= $efectividadGlobalEquipo;
        $PTEE /= 100;
        return $PTEE;
    }

    public static function contarNumeroReinyeccionesAño($codigoMaquina, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        for ($i = 1; $i <= 12; $i++)
        {
            $sumatoria += RegistroUsoMaquinaPeer::contarNumeroReinyeccionesMes($codigoMaquina, $i, $año, $params, $inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function contarNumeroInyeccionesObligatoriasAño($codigoMaquina, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        for ($i = 1; $i <= 12; $i++)
        {
            $sumatoria += RegistroUsoMaquinaPeer::contarNumeroInyeccionesObligatoriasMes($codigoMaquina, $i, $año, $params, $inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function contarNumeroReinyecciones($registros, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        foreach ($registros as $registro)
        {
            //      $registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> contarNumeroTotalReinyecciones($inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function contarNumeroReinyeccionesMes($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        $registros = RegistroUsoMaquinaPeer::consultarRegistrosMes($codigoMaquina, $mes, $año, $params);

        foreach ($registros as $registro)
        {
            //			$registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> contarNumeroTotalReinyecciones($inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function contarNumeroInyeccionesObligatorias($registros, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        foreach ($registros as $registro)
        {
            //      $registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> contarNumeroInyeccionesObligatorias($inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function contarNumeroInyeccionesObligatoriasMes($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        $registros = RegistroUsoMaquinaPeer::consultarRegistrosMes($codigoMaquina, $mes, $año, $params);

        foreach ($registros as $registro)
        {
            //			$registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> contarNumeroInyeccionesObligatorias($inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function calcularNumeroDiasDelMes($mes, $año)
    {
        $numeroDias = 0;
        $fechaValida = checkdate($mes, 28, $año);
        if ($fechaValida)
        {
            $numeroDias = 28;
        }
        $fechaValida = checkdate($mes, 29, $año);
        if ($fechaValida)
        {
            $numeroDias = 29;
        }
        $fechaValida = checkdate($mes, 30, $año);
        if ($fechaValida)
        {
            $numeroDias = 30;
        }
        $fechaValida = checkdate($mes, 31, $año);
        if ($fechaValida)
        {
            $numeroDias = 31;
        }
        return $numeroDias;
    }

    public static function calcularNumeroDiasDelAño($año)
    {
        $numeroDias = 365;
        $fechaValida = checkdate(2, 29, $año);
        if ($fechaValida)
        {
            $numeroDias = 366;
        }
        return $numeroDias;
    }

    public static function calcularAprovechamiento($TF, $tiempoCalendario)
    {
        $aprovechamiento = 0;
        if ($tiempoCalendario != 0)
        {
            $aprovechamiento = 100 * ($TF / $tiempoCalendario);
        }
        return $aprovechamiento;
    }

    public static function calcularTODiaMesAño($TF, $TPNP)
    {
        return $TF - $TPNP;
    }

    public static function calcularTPAnhoEnHoras($codigoMaquina, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        for ($i = 1; $i <= 12; $i++)
        {
            $sumatoria += RegistroUsoMaquinaPeer::calcularTPMesEnHoras($codigoMaquina, $i, $año, $params, $inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function calcularTPMesEnHoras($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        $registros = RegistroUsoMaquinaPeer::consultarRegistrosMes($codigoMaquina, $mes, $año, $params);

        $maquina = MaquinaPeer::retrieveByPK($codigoMaquina);

        $sumatoria = 0;
        foreach ($registros as $registro)
        {
            //			$registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> calcularTPMinutos($inyeccionesEstandarPromedio);
        }

        return ($sumatoria / 60);
    }
    
    public static function calcularTPSemanaEnHoras($codigoMaquina, $fecha_inicio, $mes_inicio, $params, $inyeccionesEstandarPromedio)
    {
        $registros = RegistroUsoMaquinaPeer::consultarRegistrosSemana($codigoMaquina, $fecha_inicio, $mes_inicio, $params);

        $maquina = MaquinaPeer::retrieveByPK($codigoMaquina);

        $sumatoria = 0;
        foreach ($registros as $registro)
        {
            $sumatoria += $registro -> calcularTPMinutos($inyeccionesEstandarPromedio);
        }

        return ($sumatoria / 60);
    }

    public static function calcularTPDiaEnHoras($codigoMaquina, $dia, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        $registros = RegistroUsoMaquinaPeer::consultarRegistrosDia($codigoMaquina, $dia, $mes, $año, $params);

        $maquina = MaquinaPeer::retrieveByPK($codigoMaquina);

        $sumatoria = 0;
        foreach ($registros as $registro)
        {
            //			$registro = new RegistroUsoMaquina();

            $sumatoria += $registro -> calcularTPMinutos($inyeccionesEstandarPromedio);
        }

        return ($sumatoria / 60);
    }

    public static function calcularTFDiaMesAño($tiempoCalendario, $TPP, $TNP)
    {
        return $tiempoCalendario - $TPP - $TNP;
    }

    public static function calcularTFDiaHoras($TPP, $TNP)
    {
        return RegistroUsoMaquinaPeer::calcularTFDiaMesAño(24, $TPP, $TNP);
    }

    public static function calcularTPNPAnhoEnDias($codigoMaquina, $año, $params, $inyeccionesEstandarPromedio)
    {
        return (RegistroUsoMaquinaPeer::calcularTPNPAnhoEnHoras($codigoMaquina, $año, $params, $inyeccionesEstandarPromedio) / 24);
    }

    public static function calcularTPNPAnhoEnHoras($codigoMaquina, $año, $params, $inyeccionesEstandarPromedio)
    {
        $sumatoria = 0;

        for ($i = 1; $i <= 12; $i++)
        {
            $sumatoria += RegistroUsoMaquinaPeer::calcularTPNPMesEnHoras($codigoMaquina, $i, $año, $params, $inyeccionesEstandarPromedio);
        }

        return $sumatoria;
    }

    public static function calcularTPNPMesEnDias($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        return (RegistroUsoMaquinaPeer::calcularTPNPMesEnHoras($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio) / 24);
    }

    public static function calcularTPNPMesEnHoras($codigoMaquina, $mes, $año, $params, $inyeccionesEstandarPromedio = 8)
    {
        $registros = RegistroUsoMaquinaPeer::consultarRegistrosMes($codigoMaquina, $mes, $año, $params);

        $sumatoria = 0;
        foreach ($registros as $registro)
        {
            $sumatoria += $registro -> calcularTPNPMinutos($inyeccionesEstandarPromedio);
            $sumatoria += $registro -> calcularPerdidaCambioMetodoAjusteMinutos();
            $sumatoria += $registro -> getRumFallas();
        }

        return ($sumatoria / 60);
    }
    
    public static function calcularTPNPSemanaEnHoras($codigoMaquina, $fecha_inicio, $fecha_fin, $params, $inyeccionesEstandarPromedio = 8)
    {
        $registros = RegistroUsoMaquinaPeer::consultarRegistrosSemana($codigoMaquina, $fecha_inicio, $fecha_fin, $params);

        $sumatoria = 0;
        foreach ($registros as $registro)
        {
            $sumatoria += $registro -> calcularTPNPMinutos($inyeccionesEstandarPromedio);
            $sumatoria += $registro -> calcularPerdidaCambioMetodoAjusteMinutos();
            $sumatoria += $registro -> getRumFallas();
        }

        return ($sumatoria / 60);
    }

    public static function calcularTPNPDiaEnHoras($codigoMaquina, $dia, $mes, $año, $params, $inyeccionesEstandarPromedio)
    {
        $registros = RegistroUsoMaquinaPeer::consultarRegistrosDia($codigoMaquina, $dia, $mes, $año, $params);

        $sumatoria = 0;
        foreach ($registros as $registro)
        {
            $sumatoria += $registro -> calcularTPNPMinutos($inyeccionesEstandarPromedio);
            $sumatoria += $registro -> calcularPerdidaCambioMetodoAjusteMinutos();
            $sumatoria += $registro -> getRumFallas();
        }

        return ($sumatoria / 60);
    }

    public static function calcularTPPAnhoEnDias($codigoMaquina, $año, $params)
    {
        return (RegistroUsoMaquinaPeer::calcularTPPAnhoEnHoras($codigoMaquina, $año, $params) / 24);
    }

    public static function calcularTPPAnhoEnHoras($codigoMaquina, $año, $params)
    {
        $sumatoria = 0;

        for ($i = 1; $i <= 12; $i++)
        {
            $sumatoria += RegistroUsoMaquinaPeer::calcularTPPMesEnHoras($codigoMaquina, $i, $año, $params);
        }

        return $sumatoria;
    }

    public static function calcularTPPMesEnDias($codigoMaquina, $mes, $año, $params)
    {
        return (RegistroUsoMaquinaPeer::calcularTPPMesEnHoras($codigoMaquina, $mes, $año, $params) / 24);
    }

    public static function calcularTPPMesEnHoras($codigoMaquina, $mes, $año, $params)
    {
        $registros = RegistroUsoMaquinaPeer::consultarRegistrosMes($codigoMaquina, $mes, $año, $params);

        $sumatoria = 0;
        foreach ($registros as $registro)
        {
            $sumatoria += $registro -> getRumTiempoCambioModelo();
        }

        return ($sumatoria / 60);
    }
    
    public static function calcularTPPSemanaEnHoras($codigoMaquina, $fecha_inicio, $fecha_fin, $params)
    {
        $registros = RegistroUsoMaquinaPeer::consultarRegistrosSemana($codigoMaquina, $fecha_inicio, $fecha_fin, $params);

        $sumatoria = 0;
        foreach ($registros as $registro)
        {
            $sumatoria += $registro -> getRumTiempoCambioModelo();
        }

        return ($sumatoria / 60);
    }

    public static function calcularTPPDiaEnHoras($codigoMaquina, $dia, $mes, $año, $params)
    {
        $registros = RegistroUsoMaquinaPeer::consultarRegistrosDia($codigoMaquina, $dia, $mes, $año, $params);

        $sumatoria = 0;
        foreach ($registros as $registro)
        {
            $sumatoria += $registro -> getRumTiempoCambioModelo();
        }

        return ($sumatoria / 60);
    }

    public static function calcularTNPAnhoEnDias($codigoMaquina, $año, $params)
    {
        return (RegistroUsoMaquinaPeer::calcularTNPAnhoEnHoras($codigoMaquina, $año, $params) / 24);
    }

    public static function calcularTNPAnhoEnHoras($codigoMaquina, $año, $params)
    {
        $sumatoria = 0;

        for ($i = 1; $i <= 12; $i++)
        {
            $sumatoria += RegistroUsoMaquinaPeer::calcularTNPMesEnHoras($codigoMaquina, $i, $año, $params);
        }

        return $sumatoria;
    }

    public static function calcularMinutos($dia, $horas, $minutos, $segundos)
    {
        return (($dia - 1) * 24 * 60) + ($horas * 60) + $minutos + ($segundos / 60);
    }

    public static function consultarRegistrosMes($codigoMaquina, $mes, $año, $params)
    {
        $fechaInferiorCerrada = date_create($año . '-' . $mes . '-01') -> format('Y-m-d');
        $fechaSuperiorAbierta = null;
        if ($mes < 12)
        {
            $fechaSuperiorAbierta = date_create($año . '-' . ($mes + 1) . '-01') -> format('Y-m-d');
        } else
        {
            $fechaSuperiorAbierta = date_create(((int)$año + 1) . '-01-01') -> format('Y-m-d');
        }

        $criteria = new Criteria();
        $criteria -> add(RegistroUsoMaquinaPeer::RUM_MAQ_CODIGO, $codigoMaquina);
        $criteria -> add(RegistroUsoMaquinaPeer::RUM_FECHA, $fechaInferiorCerrada, Criteria::GREATER_EQUAL);
        $criteria -> addAnd(RegistroUsoMaquinaPeer::RUM_FECHA, $fechaSuperiorAbierta, Criteria::LESS_THAN);
        $criteria -> add(RegistroUsoMaquinaPeer::RUM_ELIMINADO, false);
        $criteria -> addAscendingOrderByColumn(RegistroUsoMaquinaPeer::RUM_FECHA);
        $criteria -> addAscendingOrderByColumn(RegistroUsoMaquinaPeer::RUM_TIEMPO_ENTRE_MODELO);

        if (isset($params['codigo_operario']))
        {
            $criteria -> add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO, $params['codigo_operario']);
        }

        if (isset($params['codigo_metodo']))
        {
            $criteria -> add(RegistroUsoMaquinaPeer::RUM_MET_CODIGO, $params['codigo_metodo']);
        }

        $registros = RegistroUsoMaquinaPeer::doSelect($criteria);

        return $registros;
    }
    
    public static function consultarRegistrosSemana($codigoMaquina, $fecha_inicio, $fecha_fin, $params)
    {
        $fecha_in = strtotime($fecha_inicio);
        $dia_inicio = (int) date('d', $fecha_in);
        $mes_inicio = (int) date('m', $fecha_in);
        $ano_inicio = (int) date('Y', $fecha_in);
        $fecha_fn = strtotime($fecha_fin);
        $dia_fin = (int) date('d', $fecha_fn);
        $mes_fin = (int) date('m', $fecha_fn);
        $ano_fin = (int) date('Y', $fecha_fn);
        $fecha_i = date_create($ano_inicio.'-'.$mes_inicio.'-'.$dia_inicio)->format('Y-m-d');
        $fecha_f = date_create($ano_fin.'-'.$mes_fin.'-'.$dia_fin)->format('Y-m-d');        

        $criteria = new Criteria();
        $criteria -> add(RegistroUsoMaquinaPeer::RUM_MAQ_CODIGO, $codigoMaquina);
        $criteria -> add(RegistroUsoMaquinaPeer::RUM_FECHA, $fecha_i, Criteria::GREATER_EQUAL);
        $criteria -> addAnd(RegistroUsoMaquinaPeer::RUM_FECHA, $fecha_f, Criteria::LESS_EQUAL);
        $criteria -> add(RegistroUsoMaquinaPeer::RUM_ELIMINADO, false);
        $criteria -> addAscendingOrderByColumn(RegistroUsoMaquinaPeer::RUM_FECHA);
        $criteria -> addAscendingOrderByColumn(RegistroUsoMaquinaPeer::RUM_TIEMPO_ENTRE_MODELO);

        if (isset($params['codigo_operario']))
        {
            $criteria -> add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO, $params['codigo_operario']);
        }

        if (isset($params['codigo_metodo']))
        {
            $criteria -> add(RegistroUsoMaquinaPeer::RUM_MET_CODIGO, $params['codigo_metodo']);
        }

        $registros = RegistroUsoMaquinaPeer::doSelect($criteria);

        return $registros;
    }

    public static function consultarRegistrosDia($codigoMaquina, $dia, $mes, $año, $params)
    {
        $fecha = date_create($año . '-' . $mes . '-' . $dia) -> format('Y-m-d');

        $criteria = new Criteria();
        $criteria -> add(RegistroUsoMaquinaPeer::RUM_MAQ_CODIGO, $codigoMaquina);
        $criteria -> add(RegistroUsoMaquinaPeer::RUM_FECHA, $fecha);
        $criteria -> add(RegistroUsoMaquinaPeer::RUM_ELIMINADO, false);
        $criteria -> addAscendingOrderByColumn(RegistroUsoMaquinaPeer::RUM_FECHA);
        $criteria -> addAscendingOrderByColumn(RegistroUsoMaquinaPeer::RUM_TIEMPO_ENTRE_MODELO);

        if (isset($params['codigo_operario']))
        {
            $criteria -> add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO, $params['codigo_operario']);
        }

        if (isset($params['codigo_metodo']))
        {
            $criteria -> add(RegistroUsoMaquinaPeer::RUM_MET_CODIGO, $params['codigo_metodo']);
        }

        $registros = RegistroUsoMaquinaPeer::doSelect($criteria);

        return $registros;
    }

    public static function calcularTNPMesEnDias($codigoMaquina, $mes, $año, $params)
    {
        return (RegistroUsoMaquinaPeer::calcularTNPMesEnHoras($codigoMaquina, $mes, $año, $params) / 24);
    }

    public static function calcularTNPMesEnHoras($codigoMaquina, $mes, $año, $params)
    {
        $registros = RegistroUsoMaquinaPeer::consultarRegistrosMes($codigoMaquina, $mes, $año, $params);
        $minutosActuales = 0;
        $minutosTiempoNoProgramado = 0;
        $sumatoria = 0;
        foreach ($registros as $registro)
        {
            $minutosTiempoNoProgramado = RegistroUsoMaquinaPeer::calcularMinutos((int)$registro -> getRumFecha('d'), (int)$registro -> getRumTiempoEntreModelo('H'), (int)$registro -> getRumTiempoEntreModelo('i'), (int)$registro -> getRumTiempoEntreModelo('s'));
            $minutosTiempoNoProgramado -= $minutosActuales;

            $sumatoria += $minutosTiempoNoProgramado;

            $minutosActuales = RegistroUsoMaquinaPeer::calcularMinutos((int)$registro -> getRumFecha('d'), (int)$registro -> getRumHoraFinTrabajo('H'), (int)$registro -> getRumHoraFinTrabajo('i'), (int)$registro -> getRumHoraFinTrabajo('s'));
        }

        $maquina = MaquinaPeer::retrieveByPK($codigoMaquina);

        $minutosActivos = $maquina -> calcularNumeroMinutosActivosDelMes($mes, $año);
        $sumatoria += ($minutosActivos - $minutosActuales);
        return ($sumatoria / 60);
    }
    
    public static function calcularTNPSemanaEnHoras($codigoMaquina, $fecha_inicio, $fecha_fin, $params)
    {
        $registros = RegistroUsoMaquinaPeer::consultarRegistrosSemana($codigoMaquina, $fecha_inicio, $fecha_fin, $params);
        $minutosActuales = 0;
        $minutosTiempoNoProgramado = 0;
        $sumatoria = 0;
        foreach ($registros as $registro)
        {
            $minutosTiempoNoProgramado = RegistroUsoMaquinaPeer::calcularMinutos((int)$registro -> getRumFecha('d'), (int)$registro -> getRumTiempoEntreModelo('H'), (int)$registro -> getRumTiempoEntreModelo('i'), (int)$registro -> getRumTiempoEntreModelo('s'));
            $minutosTiempoNoProgramado -= $minutosActuales;

            $sumatoria += $minutosTiempoNoProgramado;

            $minutosActuales = RegistroUsoMaquinaPeer::calcularMinutos((int)$registro -> getRumFecha('d'), (int)$registro -> getRumHoraFinTrabajo('H'), (int)$registro -> getRumHoraFinTrabajo('i'), (int)$registro -> getRumHoraFinTrabajo('s'));
        }

        $maquina = MaquinaPeer::retrieveByPK($codigoMaquina);
        
        //Calcular minutos activos del rango de fechas        
        $minutosActivos = $maquina->calcularNumeroMinutosActivosSemana($fecha_inicio, $fecha_fin);
                
        $sumatoria += ($minutosActivos - $minutosActuales);
        return ($sumatoria / 60);
    }

    public static function calcularTNPDiaEnHoras($codigoMaquina, $dia, $mes, $año, $params)
    {
        $registros = RegistroUsoMaquinaPeer::consultarRegistrosDia($codigoMaquina, $dia, $mes, $año, $params);

        $minutosActuales = 0;
        $minutosTiempoNoProgramado = 0;
        $sumatoria = 0;
        foreach ($registros as $registro)
        {
            $minutosTiempoNoProgramado = RegistroUsoMaquinaPeer::calcularMinutos((int)$registro -> getRumFecha('d'), (int)$registro -> getRumTiempoEntreModelo('H'), (int)$registro -> getRumTiempoEntreModelo('i'), (int)$registro -> getRumTiempoEntreModelo('s'));
            $minutosTiempoNoProgramado -= $minutosActuales;

            $sumatoria += $minutosTiempoNoProgramado;

            $minutosActuales = RegistroUsoMaquinaPeer::calcularMinutos((int)$registro -> getRumFecha('d'), (int)$registro -> getRumHoraFinTrabajo('H'), (int)$registro -> getRumHoraFinTrabajo('i'), (int)$registro -> getRumHoraFinTrabajo('s'));
        }

        $maquina = MaquinaPeer::retrieveByPK($codigoMaquina);

        $sumatoria += ($maquina -> calcularNumeroMinutosActivosDelDia($dia, $mes, $año) - $minutosActuales);
        return ($sumatoria / 60);
    }

    /**
     *@author:maryit sanchez
     */
    public static function obtenerCantidadMaxDiasMes($mes, $anio)
    {
        $cant_dias = 0;
        for ($dia = 31; $dia > 26; $dia--)
        {
            if (checkdate($mes, $dia, $anio))
            {
                $cant_dias = $dia;
                $dia = 26;
            }
        }
        return $cant_dias + 1;
    }

} // RegistroUsoMaquinaPeer
