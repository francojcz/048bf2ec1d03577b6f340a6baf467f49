<?php

/**
 * Base class that represents a row from the 'usuario' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/18/13 22:30:39
 *
 * @package    lib.model.om
 */
abstract class BaseUsuario extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        UsuarioPeer
	 */
	protected static $peer;

	/**
	 * The value for the usu_codigo field.
	 * @var        int
	 */
	protected $usu_codigo;

	/**
	 * The value for the usu_per_codigo field.
	 * @var        int
	 */
	protected $usu_per_codigo;

	/**
	 * The value for the usu_login field.
	 * @var        string
	 */
	protected $usu_login;

	/**
	 * The value for the usu_password field.
	 * @var        string
	 */
	protected $usu_password;

	/**
	 * The value for the usu_habilitado field.
	 * @var        int
	 */
	protected $usu_habilitado;

	/**
	 * The value for the usu_fecha_registro_sistema field.
	 * @var        string
	 */
	protected $usu_fecha_registro_sistema;

	/**
	 * The value for the usu_fecha_actualizacion field.
	 * @var        string
	 */
	protected $usu_fecha_actualizacion;

	/**
	 * The value for the usu_causa_actualizacion field.
	 * @var        string
	 */
	protected $usu_causa_actualizacion;

	/**
	 * The value for the usu_crea field.
	 * @var        string
	 */
	protected $usu_crea;

	/**
	 * The value for the usu_actualiza field.
	 * @var        string
	 */
	protected $usu_actualiza;

	/**
	 * @var        Perfil
	 */
	protected $aPerfil;

	/**
	 * @var        array CategoriaEquipo[] Collection to store aggregation of CategoriaEquipo objects.
	 */
	protected $collCategoriaEquiposRelatedByCatUsuCrea;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCategoriaEquiposRelatedByCatUsuCrea.
	 */
	private $lastCategoriaEquipoRelatedByCatUsuCreaCriteria = null;

	/**
	 * @var        array CategoriaEquipo[] Collection to store aggregation of CategoriaEquipo objects.
	 */
	protected $collCategoriaEquiposRelatedByCatUsuActualiza;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCategoriaEquiposRelatedByCatUsuActualiza.
	 */
	private $lastCategoriaEquipoRelatedByCatUsuActualizaCriteria = null;

	/**
	 * @var        array CategoriaEvento[] Collection to store aggregation of CategoriaEvento objects.
	 */
	protected $collCategoriaEventosRelatedByCatUsuCrea;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCategoriaEventosRelatedByCatUsuCrea.
	 */
	private $lastCategoriaEventoRelatedByCatUsuCreaCriteria = null;

	/**
	 * @var        array CategoriaEvento[] Collection to store aggregation of CategoriaEvento objects.
	 */
	protected $collCategoriaEventosRelatedByCatUsuActualiza;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCategoriaEventosRelatedByCatUsuActualiza.
	 */
	private $lastCategoriaEventoRelatedByCatUsuActualizaCriteria = null;

	/**
	 * @var        array Empleado[] Collection to store aggregation of Empleado objects.
	 */
	protected $collEmpleadosRelatedByEmplUsuCodigo;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmpleadosRelatedByEmplUsuCodigo.
	 */
	private $lastEmpleadoRelatedByEmplUsuCodigoCriteria = null;

	/**
	 * @var        array Empleado[] Collection to store aggregation of Empleado objects.
	 */
	protected $collEmpleadosRelatedByEmplUsuCrea;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmpleadosRelatedByEmplUsuCrea.
	 */
	private $lastEmpleadoRelatedByEmplUsuCreaCriteria = null;

	/**
	 * @var        array Empleado[] Collection to store aggregation of Empleado objects.
	 */
	protected $collEmpleadosRelatedByEmplUsuActualiza;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmpleadosRelatedByEmplUsuActualiza.
	 */
	private $lastEmpleadoRelatedByEmplUsuActualizaCriteria = null;

	/**
	 * @var        array Empresa[] Collection to store aggregation of Empresa objects.
	 */
	protected $collEmpresasRelatedByEmpUsuCrea;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmpresasRelatedByEmpUsuCrea.
	 */
	private $lastEmpresaRelatedByEmpUsuCreaCriteria = null;

	/**
	 * @var        array Empresa[] Collection to store aggregation of Empresa objects.
	 */
	protected $collEmpresasRelatedByEmpUsuActualiza;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmpresasRelatedByEmpUsuActualiza.
	 */
	private $lastEmpresaRelatedByEmpUsuActualizaCriteria = null;

	/**
	 * @var        array Estado[] Collection to store aggregation of Estado objects.
	 */
	protected $collEstadosRelatedByEstUsuCrea;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEstadosRelatedByEstUsuCrea.
	 */
	private $lastEstadoRelatedByEstUsuCreaCriteria = null;

	/**
	 * @var        array Estado[] Collection to store aggregation of Estado objects.
	 */
	protected $collEstadosRelatedByEstUsuActualiza;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEstadosRelatedByEstUsuActualiza.
	 */
	private $lastEstadoRelatedByEstUsuActualizaCriteria = null;

	/**
	 * @var        array Evento[] Collection to store aggregation of Evento objects.
	 */
	protected $collEventosRelatedByEveUsuCrea;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEventosRelatedByEveUsuCrea.
	 */
	private $lastEventoRelatedByEveUsuCreaCriteria = null;

	/**
	 * @var        array Evento[] Collection to store aggregation of Evento objects.
	 */
	protected $collEventosRelatedByEveUsuActualiza;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEventosRelatedByEveUsuActualiza.
	 */
	private $lastEventoRelatedByEveUsuActualizaCriteria = null;

	/**
	 * @var        array EventoEnRegistro[] Collection to store aggregation of EventoEnRegistro objects.
	 */
	protected $collEventoEnRegistrosRelatedByEvrgUsuCrea;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEventoEnRegistrosRelatedByEvrgUsuCrea.
	 */
	private $lastEventoEnRegistroRelatedByEvrgUsuCreaCriteria = null;

	/**
	 * @var        array EventoEnRegistro[] Collection to store aggregation of EventoEnRegistro objects.
	 */
	protected $collEventoEnRegistrosRelatedByEvrgUsuActualiza;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEventoEnRegistrosRelatedByEvrgUsuActualiza.
	 */
	private $lastEventoEnRegistroRelatedByEvrgUsuActualizaCriteria = null;

	/**
	 * @var        array EventoPorCategoria[] Collection to store aggregation of EventoPorCategoria objects.
	 */
	protected $collEventoPorCategorias;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEventoPorCategorias.
	 */
	private $lastEventoPorCategoriaCriteria = null;

	/**
	 * @var        array Indicador[] Collection to store aggregation of Indicador objects.
	 */
	protected $collIndicadorsRelatedByIndUsuCrea;

	/**
	 * @var        Criteria The criteria used to select the current contents of collIndicadorsRelatedByIndUsuCrea.
	 */
	private $lastIndicadorRelatedByIndUsuCreaCriteria = null;

	/**
	 * @var        array Indicador[] Collection to store aggregation of Indicador objects.
	 */
	protected $collIndicadorsRelatedByIndUsuActualiza;

	/**
	 * @var        Criteria The criteria used to select the current contents of collIndicadorsRelatedByIndUsuActualiza.
	 */
	private $lastIndicadorRelatedByIndUsuActualizaCriteria = null;

	/**
	 * @var        array Maquina[] Collection to store aggregation of Maquina objects.
	 */
	protected $collMaquinasRelatedByMaqUsuCrea;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMaquinasRelatedByMaqUsuCrea.
	 */
	private $lastMaquinaRelatedByMaqUsuCreaCriteria = null;

	/**
	 * @var        array Maquina[] Collection to store aggregation of Maquina objects.
	 */
	protected $collMaquinasRelatedByMaqUsuActualiza;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMaquinasRelatedByMaqUsuActualiza.
	 */
	private $lastMaquinaRelatedByMaqUsuActualizaCriteria = null;

	/**
	 * @var        array MetaAnualXIndicador[] Collection to store aggregation of MetaAnualXIndicador objects.
	 */
	protected $collMetaAnualXIndicadorsRelatedByMeaUsuCrea;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMetaAnualXIndicadorsRelatedByMeaUsuCrea.
	 */
	private $lastMetaAnualXIndicadorRelatedByMeaUsuCreaCriteria = null;

	/**
	 * @var        array MetaAnualXIndicador[] Collection to store aggregation of MetaAnualXIndicador objects.
	 */
	protected $collMetaAnualXIndicadorsRelatedByMeaUsuActualiza;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMetaAnualXIndicadorsRelatedByMeaUsuActualiza.
	 */
	private $lastMetaAnualXIndicadorRelatedByMeaUsuActualizaCriteria = null;

	/**
	 * @var        array Metodo[] Collection to store aggregation of Metodo objects.
	 */
	protected $collMetodosRelatedByMetUsuCrea;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMetodosRelatedByMetUsuCrea.
	 */
	private $lastMetodoRelatedByMetUsuCreaCriteria = null;

	/**
	 * @var        array Metodo[] Collection to store aggregation of Metodo objects.
	 */
	protected $collMetodosRelatedByMetUsuActualiza;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMetodosRelatedByMetUsuActualiza.
	 */
	private $lastMetodoRelatedByMetUsuActualizaCriteria = null;

	/**
	 * @var        array RegistroModificacion[] Collection to store aggregation of RegistroModificacion objects.
	 */
	protected $collRegistroModificacions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRegistroModificacions.
	 */
	private $lastRegistroModificacionCriteria = null;

	/**
	 * @var        array RegistroUsoMaquina[] Collection to store aggregation of RegistroUsoMaquina objects.
	 */
	protected $collRegistroUsoMaquinasRelatedByRumUsuCodigo;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRegistroUsoMaquinasRelatedByRumUsuCodigo.
	 */
	private $lastRegistroUsoMaquinaRelatedByRumUsuCodigoCriteria = null;

	/**
	 * @var        array RegistroUsoMaquina[] Collection to store aggregation of RegistroUsoMaquina objects.
	 */
	protected $collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino.
	 */
	private $lastRegistroUsoMaquinaRelatedByRumUsuCodigoEliminoCriteria = null;

	/**
	 * @var        array TipoIdentificacion[] Collection to store aggregation of TipoIdentificacion objects.
	 */
	protected $collTipoIdentificacionsRelatedByTidUsuCrea;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTipoIdentificacionsRelatedByTidUsuCrea.
	 */
	private $lastTipoIdentificacionRelatedByTidUsuCreaCriteria = null;

	/**
	 * @var        array TipoIdentificacion[] Collection to store aggregation of TipoIdentificacion objects.
	 */
	protected $collTipoIdentificacionsRelatedByTidUsuActualiza;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTipoIdentificacionsRelatedByTidUsuActualiza.
	 */
	private $lastTipoIdentificacionRelatedByTidUsuActualizaCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'UsuarioPeer';

	/**
	 * Get the [usu_codigo] column value.
	 * 
	 * @return     int
	 */
	public function getUsuCodigo()
	{
		return $this->usu_codigo;
	}

	/**
	 * Get the [usu_per_codigo] column value.
	 * 
	 * @return     int
	 */
	public function getUsuPerCodigo()
	{
		return $this->usu_per_codigo;
	}

	/**
	 * Get the [usu_login] column value.
	 * 
	 * @return     string
	 */
	public function getUsuLogin()
	{
		return $this->usu_login;
	}

	/**
	 * Get the [usu_password] column value.
	 * 
	 * @return     string
	 */
	public function getUsuPassword()
	{
		return $this->usu_password;
	}

	/**
	 * Get the [usu_habilitado] column value.
	 * 
	 * @return     int
	 */
	public function getUsuHabilitado()
	{
		return $this->usu_habilitado;
	}

	/**
	 * Get the [optionally formatted] temporal [usu_fecha_registro_sistema] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUsuFechaRegistroSistema($format = 'Y-m-d H:i:s')
	{
		if ($this->usu_fecha_registro_sistema === null) {
			return null;
		}


		if ($this->usu_fecha_registro_sistema === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->usu_fecha_registro_sistema);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->usu_fecha_registro_sistema, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [usu_fecha_actualizacion] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUsuFechaActualizacion($format = 'Y-m-d H:i:s')
	{
		if ($this->usu_fecha_actualizacion === null) {
			return null;
		}


		if ($this->usu_fecha_actualizacion === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->usu_fecha_actualizacion);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->usu_fecha_actualizacion, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [usu_causa_actualizacion] column value.
	 * 
	 * @return     string
	 */
	public function getUsuCausaActualizacion()
	{
		return $this->usu_causa_actualizacion;
	}

	/**
	 * Get the [usu_crea] column value.
	 * 
	 * @return     string
	 */
	public function getUsuCrea()
	{
		return $this->usu_crea;
	}

	/**
	 * Get the [usu_actualiza] column value.
	 * 
	 * @return     string
	 */
	public function getUsuActualiza()
	{
		return $this->usu_actualiza;
	}

	/**
	 * Set the value of [usu_codigo] column.
	 * 
	 * @param      int $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setUsuCodigo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->usu_codigo !== $v) {
			$this->usu_codigo = $v;
			$this->modifiedColumns[] = UsuarioPeer::USU_CODIGO;
		}

		return $this;
	} // setUsuCodigo()

	/**
	 * Set the value of [usu_per_codigo] column.
	 * 
	 * @param      int $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setUsuPerCodigo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->usu_per_codigo !== $v) {
			$this->usu_per_codigo = $v;
			$this->modifiedColumns[] = UsuarioPeer::USU_PER_CODIGO;
		}

		if ($this->aPerfil !== null && $this->aPerfil->getPerCodigo() !== $v) {
			$this->aPerfil = null;
		}

		return $this;
	} // setUsuPerCodigo()

	/**
	 * Set the value of [usu_login] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setUsuLogin($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->usu_login !== $v) {
			$this->usu_login = $v;
			$this->modifiedColumns[] = UsuarioPeer::USU_LOGIN;
		}

		return $this;
	} // setUsuLogin()

	/**
	 * Set the value of [usu_password] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setUsuPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->usu_password !== $v) {
			$this->usu_password = $v;
			$this->modifiedColumns[] = UsuarioPeer::USU_PASSWORD;
		}

		return $this;
	} // setUsuPassword()

	/**
	 * Set the value of [usu_habilitado] column.
	 * 
	 * @param      int $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setUsuHabilitado($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->usu_habilitado !== $v) {
			$this->usu_habilitado = $v;
			$this->modifiedColumns[] = UsuarioPeer::USU_HABILITADO;
		}

		return $this;
	} // setUsuHabilitado()

	/**
	 * Sets the value of [usu_fecha_registro_sistema] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setUsuFechaRegistroSistema($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->usu_fecha_registro_sistema !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->usu_fecha_registro_sistema !== null && $tmpDt = new DateTime($this->usu_fecha_registro_sistema)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->usu_fecha_registro_sistema = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UsuarioPeer::USU_FECHA_REGISTRO_SISTEMA;
			}
		} // if either are not null

		return $this;
	} // setUsuFechaRegistroSistema()

	/**
	 * Sets the value of [usu_fecha_actualizacion] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setUsuFechaActualizacion($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->usu_fecha_actualizacion !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->usu_fecha_actualizacion !== null && $tmpDt = new DateTime($this->usu_fecha_actualizacion)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->usu_fecha_actualizacion = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UsuarioPeer::USU_FECHA_ACTUALIZACION;
			}
		} // if either are not null

		return $this;
	} // setUsuFechaActualizacion()

	/**
	 * Set the value of [usu_causa_actualizacion] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setUsuCausaActualizacion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->usu_causa_actualizacion !== $v) {
			$this->usu_causa_actualizacion = $v;
			$this->modifiedColumns[] = UsuarioPeer::USU_CAUSA_ACTUALIZACION;
		}

		return $this;
	} // setUsuCausaActualizacion()

	/**
	 * Set the value of [usu_crea] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setUsuCrea($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->usu_crea !== $v) {
			$this->usu_crea = $v;
			$this->modifiedColumns[] = UsuarioPeer::USU_CREA;
		}

		return $this;
	} // setUsuCrea()

	/**
	 * Set the value of [usu_actualiza] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setUsuActualiza($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->usu_actualiza !== $v) {
			$this->usu_actualiza = $v;
			$this->modifiedColumns[] = UsuarioPeer::USU_ACTUALIZA;
		}

		return $this;
	} // setUsuActualiza()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->usu_codigo = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->usu_per_codigo = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->usu_login = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->usu_password = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->usu_habilitado = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->usu_fecha_registro_sistema = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->usu_fecha_actualizacion = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->usu_causa_actualizacion = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->usu_crea = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->usu_actualiza = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 10; // 10 = UsuarioPeer::NUM_COLUMNS - UsuarioPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Usuario object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aPerfil !== null && $this->usu_per_codigo !== $this->aPerfil->getPerCodigo()) {
			$this->aPerfil = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = UsuarioPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aPerfil = null;
			$this->collCategoriaEquiposRelatedByCatUsuCrea = null;
			$this->lastCategoriaEquipoRelatedByCatUsuCreaCriteria = null;

			$this->collCategoriaEquiposRelatedByCatUsuActualiza = null;
			$this->lastCategoriaEquipoRelatedByCatUsuActualizaCriteria = null;

			$this->collCategoriaEventosRelatedByCatUsuCrea = null;
			$this->lastCategoriaEventoRelatedByCatUsuCreaCriteria = null;

			$this->collCategoriaEventosRelatedByCatUsuActualiza = null;
			$this->lastCategoriaEventoRelatedByCatUsuActualizaCriteria = null;

			$this->collEmpleadosRelatedByEmplUsuCodigo = null;
			$this->lastEmpleadoRelatedByEmplUsuCodigoCriteria = null;

			$this->collEmpleadosRelatedByEmplUsuCrea = null;
			$this->lastEmpleadoRelatedByEmplUsuCreaCriteria = null;

			$this->collEmpleadosRelatedByEmplUsuActualiza = null;
			$this->lastEmpleadoRelatedByEmplUsuActualizaCriteria = null;

			$this->collEmpresasRelatedByEmpUsuCrea = null;
			$this->lastEmpresaRelatedByEmpUsuCreaCriteria = null;

			$this->collEmpresasRelatedByEmpUsuActualiza = null;
			$this->lastEmpresaRelatedByEmpUsuActualizaCriteria = null;

			$this->collEstadosRelatedByEstUsuCrea = null;
			$this->lastEstadoRelatedByEstUsuCreaCriteria = null;

			$this->collEstadosRelatedByEstUsuActualiza = null;
			$this->lastEstadoRelatedByEstUsuActualizaCriteria = null;

			$this->collEventosRelatedByEveUsuCrea = null;
			$this->lastEventoRelatedByEveUsuCreaCriteria = null;

			$this->collEventosRelatedByEveUsuActualiza = null;
			$this->lastEventoRelatedByEveUsuActualizaCriteria = null;

			$this->collEventoEnRegistrosRelatedByEvrgUsuCrea = null;
			$this->lastEventoEnRegistroRelatedByEvrgUsuCreaCriteria = null;

			$this->collEventoEnRegistrosRelatedByEvrgUsuActualiza = null;
			$this->lastEventoEnRegistroRelatedByEvrgUsuActualizaCriteria = null;

			$this->collEventoPorCategorias = null;
			$this->lastEventoPorCategoriaCriteria = null;

			$this->collIndicadorsRelatedByIndUsuCrea = null;
			$this->lastIndicadorRelatedByIndUsuCreaCriteria = null;

			$this->collIndicadorsRelatedByIndUsuActualiza = null;
			$this->lastIndicadorRelatedByIndUsuActualizaCriteria = null;

			$this->collMaquinasRelatedByMaqUsuCrea = null;
			$this->lastMaquinaRelatedByMaqUsuCreaCriteria = null;

			$this->collMaquinasRelatedByMaqUsuActualiza = null;
			$this->lastMaquinaRelatedByMaqUsuActualizaCriteria = null;

			$this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea = null;
			$this->lastMetaAnualXIndicadorRelatedByMeaUsuCreaCriteria = null;

			$this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza = null;
			$this->lastMetaAnualXIndicadorRelatedByMeaUsuActualizaCriteria = null;

			$this->collMetodosRelatedByMetUsuCrea = null;
			$this->lastMetodoRelatedByMetUsuCreaCriteria = null;

			$this->collMetodosRelatedByMetUsuActualiza = null;
			$this->lastMetodoRelatedByMetUsuActualizaCriteria = null;

			$this->collRegistroModificacions = null;
			$this->lastRegistroModificacionCriteria = null;

			$this->collRegistroUsoMaquinasRelatedByRumUsuCodigo = null;
			$this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoCriteria = null;

			$this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino = null;
			$this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoEliminoCriteria = null;

			$this->collTipoIdentificacionsRelatedByTidUsuCrea = null;
			$this->lastTipoIdentificacionRelatedByTidUsuCreaCriteria = null;

			$this->collTipoIdentificacionsRelatedByTidUsuActualiza = null;
			$this->lastTipoIdentificacionRelatedByTidUsuActualizaCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUsuario:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				UsuarioPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUsuario:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUsuario:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUsuario:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				UsuarioPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aPerfil !== null) {
				if ($this->aPerfil->isModified() || $this->aPerfil->isNew()) {
					$affectedRows += $this->aPerfil->save($con);
				}
				$this->setPerfil($this->aPerfil);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = UsuarioPeer::USU_CODIGO;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = UsuarioPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setUsuCodigo($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += UsuarioPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collCategoriaEquiposRelatedByCatUsuCrea !== null) {
				foreach ($this->collCategoriaEquiposRelatedByCatUsuCrea as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCategoriaEquiposRelatedByCatUsuActualiza !== null) {
				foreach ($this->collCategoriaEquiposRelatedByCatUsuActualiza as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCategoriaEventosRelatedByCatUsuCrea !== null) {
				foreach ($this->collCategoriaEventosRelatedByCatUsuCrea as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCategoriaEventosRelatedByCatUsuActualiza !== null) {
				foreach ($this->collCategoriaEventosRelatedByCatUsuActualiza as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmpleadosRelatedByEmplUsuCodigo !== null) {
				foreach ($this->collEmpleadosRelatedByEmplUsuCodigo as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmpleadosRelatedByEmplUsuCrea !== null) {
				foreach ($this->collEmpleadosRelatedByEmplUsuCrea as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmpleadosRelatedByEmplUsuActualiza !== null) {
				foreach ($this->collEmpleadosRelatedByEmplUsuActualiza as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmpresasRelatedByEmpUsuCrea !== null) {
				foreach ($this->collEmpresasRelatedByEmpUsuCrea as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmpresasRelatedByEmpUsuActualiza !== null) {
				foreach ($this->collEmpresasRelatedByEmpUsuActualiza as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEstadosRelatedByEstUsuCrea !== null) {
				foreach ($this->collEstadosRelatedByEstUsuCrea as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEstadosRelatedByEstUsuActualiza !== null) {
				foreach ($this->collEstadosRelatedByEstUsuActualiza as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEventosRelatedByEveUsuCrea !== null) {
				foreach ($this->collEventosRelatedByEveUsuCrea as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEventosRelatedByEveUsuActualiza !== null) {
				foreach ($this->collEventosRelatedByEveUsuActualiza as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEventoEnRegistrosRelatedByEvrgUsuCrea !== null) {
				foreach ($this->collEventoEnRegistrosRelatedByEvrgUsuCrea as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEventoEnRegistrosRelatedByEvrgUsuActualiza !== null) {
				foreach ($this->collEventoEnRegistrosRelatedByEvrgUsuActualiza as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEventoPorCategorias !== null) {
				foreach ($this->collEventoPorCategorias as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collIndicadorsRelatedByIndUsuCrea !== null) {
				foreach ($this->collIndicadorsRelatedByIndUsuCrea as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collIndicadorsRelatedByIndUsuActualiza !== null) {
				foreach ($this->collIndicadorsRelatedByIndUsuActualiza as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMaquinasRelatedByMaqUsuCrea !== null) {
				foreach ($this->collMaquinasRelatedByMaqUsuCrea as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMaquinasRelatedByMaqUsuActualiza !== null) {
				foreach ($this->collMaquinasRelatedByMaqUsuActualiza as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea !== null) {
				foreach ($this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza !== null) {
				foreach ($this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMetodosRelatedByMetUsuCrea !== null) {
				foreach ($this->collMetodosRelatedByMetUsuCrea as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMetodosRelatedByMetUsuActualiza !== null) {
				foreach ($this->collMetodosRelatedByMetUsuActualiza as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRegistroModificacions !== null) {
				foreach ($this->collRegistroModificacions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigo !== null) {
				foreach ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigo as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino !== null) {
				foreach ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTipoIdentificacionsRelatedByTidUsuCrea !== null) {
				foreach ($this->collTipoIdentificacionsRelatedByTidUsuCrea as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTipoIdentificacionsRelatedByTidUsuActualiza !== null) {
				foreach ($this->collTipoIdentificacionsRelatedByTidUsuActualiza as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aPerfil !== null) {
				if (!$this->aPerfil->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPerfil->getValidationFailures());
				}
			}


			if (($retval = UsuarioPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collCategoriaEquiposRelatedByCatUsuCrea !== null) {
					foreach ($this->collCategoriaEquiposRelatedByCatUsuCrea as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCategoriaEquiposRelatedByCatUsuActualiza !== null) {
					foreach ($this->collCategoriaEquiposRelatedByCatUsuActualiza as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCategoriaEventosRelatedByCatUsuCrea !== null) {
					foreach ($this->collCategoriaEventosRelatedByCatUsuCrea as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCategoriaEventosRelatedByCatUsuActualiza !== null) {
					foreach ($this->collCategoriaEventosRelatedByCatUsuActualiza as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmpleadosRelatedByEmplUsuCodigo !== null) {
					foreach ($this->collEmpleadosRelatedByEmplUsuCodigo as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmpleadosRelatedByEmplUsuCrea !== null) {
					foreach ($this->collEmpleadosRelatedByEmplUsuCrea as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmpleadosRelatedByEmplUsuActualiza !== null) {
					foreach ($this->collEmpleadosRelatedByEmplUsuActualiza as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmpresasRelatedByEmpUsuCrea !== null) {
					foreach ($this->collEmpresasRelatedByEmpUsuCrea as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmpresasRelatedByEmpUsuActualiza !== null) {
					foreach ($this->collEmpresasRelatedByEmpUsuActualiza as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEstadosRelatedByEstUsuCrea !== null) {
					foreach ($this->collEstadosRelatedByEstUsuCrea as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEstadosRelatedByEstUsuActualiza !== null) {
					foreach ($this->collEstadosRelatedByEstUsuActualiza as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEventosRelatedByEveUsuCrea !== null) {
					foreach ($this->collEventosRelatedByEveUsuCrea as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEventosRelatedByEveUsuActualiza !== null) {
					foreach ($this->collEventosRelatedByEveUsuActualiza as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEventoEnRegistrosRelatedByEvrgUsuCrea !== null) {
					foreach ($this->collEventoEnRegistrosRelatedByEvrgUsuCrea as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEventoEnRegistrosRelatedByEvrgUsuActualiza !== null) {
					foreach ($this->collEventoEnRegistrosRelatedByEvrgUsuActualiza as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEventoPorCategorias !== null) {
					foreach ($this->collEventoPorCategorias as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collIndicadorsRelatedByIndUsuCrea !== null) {
					foreach ($this->collIndicadorsRelatedByIndUsuCrea as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collIndicadorsRelatedByIndUsuActualiza !== null) {
					foreach ($this->collIndicadorsRelatedByIndUsuActualiza as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMaquinasRelatedByMaqUsuCrea !== null) {
					foreach ($this->collMaquinasRelatedByMaqUsuCrea as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMaquinasRelatedByMaqUsuActualiza !== null) {
					foreach ($this->collMaquinasRelatedByMaqUsuActualiza as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea !== null) {
					foreach ($this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza !== null) {
					foreach ($this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMetodosRelatedByMetUsuCrea !== null) {
					foreach ($this->collMetodosRelatedByMetUsuCrea as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMetodosRelatedByMetUsuActualiza !== null) {
					foreach ($this->collMetodosRelatedByMetUsuActualiza as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRegistroModificacions !== null) {
					foreach ($this->collRegistroModificacions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigo !== null) {
					foreach ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigo as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino !== null) {
					foreach ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTipoIdentificacionsRelatedByTidUsuCrea !== null) {
					foreach ($this->collTipoIdentificacionsRelatedByTidUsuCrea as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTipoIdentificacionsRelatedByTidUsuActualiza !== null) {
					foreach ($this->collTipoIdentificacionsRelatedByTidUsuActualiza as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UsuarioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getUsuCodigo();
				break;
			case 1:
				return $this->getUsuPerCodigo();
				break;
			case 2:
				return $this->getUsuLogin();
				break;
			case 3:
				return $this->getUsuPassword();
				break;
			case 4:
				return $this->getUsuHabilitado();
				break;
			case 5:
				return $this->getUsuFechaRegistroSistema();
				break;
			case 6:
				return $this->getUsuFechaActualizacion();
				break;
			case 7:
				return $this->getUsuCausaActualizacion();
				break;
			case 8:
				return $this->getUsuCrea();
				break;
			case 9:
				return $this->getUsuActualiza();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = UsuarioPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getUsuCodigo(),
			$keys[1] => $this->getUsuPerCodigo(),
			$keys[2] => $this->getUsuLogin(),
			$keys[3] => $this->getUsuPassword(),
			$keys[4] => $this->getUsuHabilitado(),
			$keys[5] => $this->getUsuFechaRegistroSistema(),
			$keys[6] => $this->getUsuFechaActualizacion(),
			$keys[7] => $this->getUsuCausaActualizacion(),
			$keys[8] => $this->getUsuCrea(),
			$keys[9] => $this->getUsuActualiza(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UsuarioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setUsuCodigo($value);
				break;
			case 1:
				$this->setUsuPerCodigo($value);
				break;
			case 2:
				$this->setUsuLogin($value);
				break;
			case 3:
				$this->setUsuPassword($value);
				break;
			case 4:
				$this->setUsuHabilitado($value);
				break;
			case 5:
				$this->setUsuFechaRegistroSistema($value);
				break;
			case 6:
				$this->setUsuFechaActualizacion($value);
				break;
			case 7:
				$this->setUsuCausaActualizacion($value);
				break;
			case 8:
				$this->setUsuCrea($value);
				break;
			case 9:
				$this->setUsuActualiza($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = UsuarioPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setUsuCodigo($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setUsuPerCodigo($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setUsuLogin($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setUsuPassword($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setUsuHabilitado($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setUsuFechaRegistroSistema($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setUsuFechaActualizacion($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setUsuCausaActualizacion($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setUsuCrea($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setUsuActualiza($arr[$keys[9]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);

		if ($this->isColumnModified(UsuarioPeer::USU_CODIGO)) $criteria->add(UsuarioPeer::USU_CODIGO, $this->usu_codigo);
		if ($this->isColumnModified(UsuarioPeer::USU_PER_CODIGO)) $criteria->add(UsuarioPeer::USU_PER_CODIGO, $this->usu_per_codigo);
		if ($this->isColumnModified(UsuarioPeer::USU_LOGIN)) $criteria->add(UsuarioPeer::USU_LOGIN, $this->usu_login);
		if ($this->isColumnModified(UsuarioPeer::USU_PASSWORD)) $criteria->add(UsuarioPeer::USU_PASSWORD, $this->usu_password);
		if ($this->isColumnModified(UsuarioPeer::USU_HABILITADO)) $criteria->add(UsuarioPeer::USU_HABILITADO, $this->usu_habilitado);
		if ($this->isColumnModified(UsuarioPeer::USU_FECHA_REGISTRO_SISTEMA)) $criteria->add(UsuarioPeer::USU_FECHA_REGISTRO_SISTEMA, $this->usu_fecha_registro_sistema);
		if ($this->isColumnModified(UsuarioPeer::USU_FECHA_ACTUALIZACION)) $criteria->add(UsuarioPeer::USU_FECHA_ACTUALIZACION, $this->usu_fecha_actualizacion);
		if ($this->isColumnModified(UsuarioPeer::USU_CAUSA_ACTUALIZACION)) $criteria->add(UsuarioPeer::USU_CAUSA_ACTUALIZACION, $this->usu_causa_actualizacion);
		if ($this->isColumnModified(UsuarioPeer::USU_CREA)) $criteria->add(UsuarioPeer::USU_CREA, $this->usu_crea);
		if ($this->isColumnModified(UsuarioPeer::USU_ACTUALIZA)) $criteria->add(UsuarioPeer::USU_ACTUALIZA, $this->usu_actualiza);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);

		$criteria->add(UsuarioPeer::USU_CODIGO, $this->usu_codigo);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getUsuCodigo();
	}

	/**
	 * Generic method to set the primary key (usu_codigo column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setUsuCodigo($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Usuario (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setUsuPerCodigo($this->usu_per_codigo);

		$copyObj->setUsuLogin($this->usu_login);

		$copyObj->setUsuPassword($this->usu_password);

		$copyObj->setUsuHabilitado($this->usu_habilitado);

		$copyObj->setUsuFechaRegistroSistema($this->usu_fecha_registro_sistema);

		$copyObj->setUsuFechaActualizacion($this->usu_fecha_actualizacion);

		$copyObj->setUsuCausaActualizacion($this->usu_causa_actualizacion);

		$copyObj->setUsuCrea($this->usu_crea);

		$copyObj->setUsuActualiza($this->usu_actualiza);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getCategoriaEquiposRelatedByCatUsuCrea() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCategoriaEquipoRelatedByCatUsuCrea($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCategoriaEquiposRelatedByCatUsuActualiza() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCategoriaEquipoRelatedByCatUsuActualiza($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCategoriaEventosRelatedByCatUsuCrea() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCategoriaEventoRelatedByCatUsuCrea($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCategoriaEventosRelatedByCatUsuActualiza() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCategoriaEventoRelatedByCatUsuActualiza($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmpleadosRelatedByEmplUsuCodigo() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmpleadoRelatedByEmplUsuCodigo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmpleadosRelatedByEmplUsuCrea() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmpleadoRelatedByEmplUsuCrea($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmpleadosRelatedByEmplUsuActualiza() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmpleadoRelatedByEmplUsuActualiza($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmpresasRelatedByEmpUsuCrea() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmpresaRelatedByEmpUsuCrea($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmpresasRelatedByEmpUsuActualiza() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmpresaRelatedByEmpUsuActualiza($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEstadosRelatedByEstUsuCrea() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEstadoRelatedByEstUsuCrea($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEstadosRelatedByEstUsuActualiza() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEstadoRelatedByEstUsuActualiza($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEventosRelatedByEveUsuCrea() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEventoRelatedByEveUsuCrea($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEventosRelatedByEveUsuActualiza() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEventoRelatedByEveUsuActualiza($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEventoEnRegistrosRelatedByEvrgUsuCrea() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEventoEnRegistroRelatedByEvrgUsuCrea($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEventoEnRegistrosRelatedByEvrgUsuActualiza() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEventoEnRegistroRelatedByEvrgUsuActualiza($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEventoPorCategorias() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEventoPorCategoria($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getIndicadorsRelatedByIndUsuCrea() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addIndicadorRelatedByIndUsuCrea($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getIndicadorsRelatedByIndUsuActualiza() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addIndicadorRelatedByIndUsuActualiza($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMaquinasRelatedByMaqUsuCrea() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMaquinaRelatedByMaqUsuCrea($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMaquinasRelatedByMaqUsuActualiza() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMaquinaRelatedByMaqUsuActualiza($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMetaAnualXIndicadorsRelatedByMeaUsuCrea() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMetaAnualXIndicadorRelatedByMeaUsuCrea($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMetaAnualXIndicadorsRelatedByMeaUsuActualiza() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMetaAnualXIndicadorRelatedByMeaUsuActualiza($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMetodosRelatedByMetUsuCrea() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMetodoRelatedByMetUsuCrea($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMetodosRelatedByMetUsuActualiza() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMetodoRelatedByMetUsuActualiza($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRegistroModificacions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRegistroModificacion($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRegistroUsoMaquinasRelatedByRumUsuCodigo() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRegistroUsoMaquinaRelatedByRumUsuCodigo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRegistroUsoMaquinasRelatedByRumUsuCodigoElimino() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRegistroUsoMaquinaRelatedByRumUsuCodigoElimino($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTipoIdentificacionsRelatedByTidUsuCrea() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTipoIdentificacionRelatedByTidUsuCrea($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTipoIdentificacionsRelatedByTidUsuActualiza() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTipoIdentificacionRelatedByTidUsuActualiza($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setUsuCodigo(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Usuario Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     UsuarioPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UsuarioPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Perfil object.
	 *
	 * @param      Perfil $v
	 * @return     Usuario The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPerfil(Perfil $v = null)
	{
		if ($v === null) {
			$this->setUsuPerCodigo(NULL);
		} else {
			$this->setUsuPerCodigo($v->getPerCodigo());
		}

		$this->aPerfil = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Perfil object, it will not be re-added.
		if ($v !== null) {
			$v->addUsuario($this);
		}

		return $this;
	}


	/**
	 * Get the associated Perfil object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Perfil The associated Perfil object.
	 * @throws     PropelException
	 */
	public function getPerfil(PropelPDO $con = null)
	{
		if ($this->aPerfil === null && ($this->usu_per_codigo !== null)) {
			$this->aPerfil = PerfilPeer::retrieveByPk($this->usu_per_codigo);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPerfil->addUsuarios($this);
			 */
		}
		return $this->aPerfil;
	}

	/**
	 * Clears out the collCategoriaEquiposRelatedByCatUsuCrea collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCategoriaEquiposRelatedByCatUsuCrea()
	 */
	public function clearCategoriaEquiposRelatedByCatUsuCrea()
	{
		$this->collCategoriaEquiposRelatedByCatUsuCrea = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCategoriaEquiposRelatedByCatUsuCrea collection (array).
	 *
	 * By default this just sets the collCategoriaEquiposRelatedByCatUsuCrea collection to an empty array (like clearcollCategoriaEquiposRelatedByCatUsuCrea());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCategoriaEquiposRelatedByCatUsuCrea()
	{
		$this->collCategoriaEquiposRelatedByCatUsuCrea = array();
	}

	/**
	 * Gets an array of CategoriaEquipo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related CategoriaEquiposRelatedByCatUsuCrea from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CategoriaEquipo[]
	 * @throws     PropelException
	 */
	public function getCategoriaEquiposRelatedByCatUsuCrea($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCategoriaEquiposRelatedByCatUsuCrea === null) {
			if ($this->isNew()) {
			   $this->collCategoriaEquiposRelatedByCatUsuCrea = array();
			} else {

				$criteria->add(CategoriaEquipoPeer::CAT_USU_CREA, $this->usu_codigo);

				CategoriaEquipoPeer::addSelectColumns($criteria);
				$this->collCategoriaEquiposRelatedByCatUsuCrea = CategoriaEquipoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CategoriaEquipoPeer::CAT_USU_CREA, $this->usu_codigo);

				CategoriaEquipoPeer::addSelectColumns($criteria);
				if (!isset($this->lastCategoriaEquipoRelatedByCatUsuCreaCriteria) || !$this->lastCategoriaEquipoRelatedByCatUsuCreaCriteria->equals($criteria)) {
					$this->collCategoriaEquiposRelatedByCatUsuCrea = CategoriaEquipoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCategoriaEquipoRelatedByCatUsuCreaCriteria = $criteria;
		return $this->collCategoriaEquiposRelatedByCatUsuCrea;
	}

	/**
	 * Returns the number of related CategoriaEquipo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CategoriaEquipo objects.
	 * @throws     PropelException
	 */
	public function countCategoriaEquiposRelatedByCatUsuCrea(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCategoriaEquiposRelatedByCatUsuCrea === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CategoriaEquipoPeer::CAT_USU_CREA, $this->usu_codigo);

				$count = CategoriaEquipoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CategoriaEquipoPeer::CAT_USU_CREA, $this->usu_codigo);

				if (!isset($this->lastCategoriaEquipoRelatedByCatUsuCreaCriteria) || !$this->lastCategoriaEquipoRelatedByCatUsuCreaCriteria->equals($criteria)) {
					$count = CategoriaEquipoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCategoriaEquiposRelatedByCatUsuCrea);
				}
			} else {
				$count = count($this->collCategoriaEquiposRelatedByCatUsuCrea);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CategoriaEquipo object to this object
	 * through the CategoriaEquipo foreign key attribute.
	 *
	 * @param      CategoriaEquipo $l CategoriaEquipo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCategoriaEquipoRelatedByCatUsuCrea(CategoriaEquipo $l)
	{
		if ($this->collCategoriaEquiposRelatedByCatUsuCrea === null) {
			$this->initCategoriaEquiposRelatedByCatUsuCrea();
		}
		if (!in_array($l, $this->collCategoriaEquiposRelatedByCatUsuCrea, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCategoriaEquiposRelatedByCatUsuCrea, $l);
			$l->setUsuarioRelatedByCatUsuCrea($this);
		}
	}

	/**
	 * Clears out the collCategoriaEquiposRelatedByCatUsuActualiza collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCategoriaEquiposRelatedByCatUsuActualiza()
	 */
	public function clearCategoriaEquiposRelatedByCatUsuActualiza()
	{
		$this->collCategoriaEquiposRelatedByCatUsuActualiza = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCategoriaEquiposRelatedByCatUsuActualiza collection (array).
	 *
	 * By default this just sets the collCategoriaEquiposRelatedByCatUsuActualiza collection to an empty array (like clearcollCategoriaEquiposRelatedByCatUsuActualiza());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCategoriaEquiposRelatedByCatUsuActualiza()
	{
		$this->collCategoriaEquiposRelatedByCatUsuActualiza = array();
	}

	/**
	 * Gets an array of CategoriaEquipo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related CategoriaEquiposRelatedByCatUsuActualiza from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CategoriaEquipo[]
	 * @throws     PropelException
	 */
	public function getCategoriaEquiposRelatedByCatUsuActualiza($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCategoriaEquiposRelatedByCatUsuActualiza === null) {
			if ($this->isNew()) {
			   $this->collCategoriaEquiposRelatedByCatUsuActualiza = array();
			} else {

				$criteria->add(CategoriaEquipoPeer::CAT_USU_ACTUALIZA, $this->usu_codigo);

				CategoriaEquipoPeer::addSelectColumns($criteria);
				$this->collCategoriaEquiposRelatedByCatUsuActualiza = CategoriaEquipoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CategoriaEquipoPeer::CAT_USU_ACTUALIZA, $this->usu_codigo);

				CategoriaEquipoPeer::addSelectColumns($criteria);
				if (!isset($this->lastCategoriaEquipoRelatedByCatUsuActualizaCriteria) || !$this->lastCategoriaEquipoRelatedByCatUsuActualizaCriteria->equals($criteria)) {
					$this->collCategoriaEquiposRelatedByCatUsuActualiza = CategoriaEquipoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCategoriaEquipoRelatedByCatUsuActualizaCriteria = $criteria;
		return $this->collCategoriaEquiposRelatedByCatUsuActualiza;
	}

	/**
	 * Returns the number of related CategoriaEquipo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CategoriaEquipo objects.
	 * @throws     PropelException
	 */
	public function countCategoriaEquiposRelatedByCatUsuActualiza(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCategoriaEquiposRelatedByCatUsuActualiza === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CategoriaEquipoPeer::CAT_USU_ACTUALIZA, $this->usu_codigo);

				$count = CategoriaEquipoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CategoriaEquipoPeer::CAT_USU_ACTUALIZA, $this->usu_codigo);

				if (!isset($this->lastCategoriaEquipoRelatedByCatUsuActualizaCriteria) || !$this->lastCategoriaEquipoRelatedByCatUsuActualizaCriteria->equals($criteria)) {
					$count = CategoriaEquipoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCategoriaEquiposRelatedByCatUsuActualiza);
				}
			} else {
				$count = count($this->collCategoriaEquiposRelatedByCatUsuActualiza);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CategoriaEquipo object to this object
	 * through the CategoriaEquipo foreign key attribute.
	 *
	 * @param      CategoriaEquipo $l CategoriaEquipo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCategoriaEquipoRelatedByCatUsuActualiza(CategoriaEquipo $l)
	{
		if ($this->collCategoriaEquiposRelatedByCatUsuActualiza === null) {
			$this->initCategoriaEquiposRelatedByCatUsuActualiza();
		}
		if (!in_array($l, $this->collCategoriaEquiposRelatedByCatUsuActualiza, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCategoriaEquiposRelatedByCatUsuActualiza, $l);
			$l->setUsuarioRelatedByCatUsuActualiza($this);
		}
	}

	/**
	 * Clears out the collCategoriaEventosRelatedByCatUsuCrea collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCategoriaEventosRelatedByCatUsuCrea()
	 */
	public function clearCategoriaEventosRelatedByCatUsuCrea()
	{
		$this->collCategoriaEventosRelatedByCatUsuCrea = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCategoriaEventosRelatedByCatUsuCrea collection (array).
	 *
	 * By default this just sets the collCategoriaEventosRelatedByCatUsuCrea collection to an empty array (like clearcollCategoriaEventosRelatedByCatUsuCrea());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCategoriaEventosRelatedByCatUsuCrea()
	{
		$this->collCategoriaEventosRelatedByCatUsuCrea = array();
	}

	/**
	 * Gets an array of CategoriaEvento objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related CategoriaEventosRelatedByCatUsuCrea from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CategoriaEvento[]
	 * @throws     PropelException
	 */
	public function getCategoriaEventosRelatedByCatUsuCrea($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCategoriaEventosRelatedByCatUsuCrea === null) {
			if ($this->isNew()) {
			   $this->collCategoriaEventosRelatedByCatUsuCrea = array();
			} else {

				$criteria->add(CategoriaEventoPeer::CAT_USU_CREA, $this->usu_codigo);

				CategoriaEventoPeer::addSelectColumns($criteria);
				$this->collCategoriaEventosRelatedByCatUsuCrea = CategoriaEventoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CategoriaEventoPeer::CAT_USU_CREA, $this->usu_codigo);

				CategoriaEventoPeer::addSelectColumns($criteria);
				if (!isset($this->lastCategoriaEventoRelatedByCatUsuCreaCriteria) || !$this->lastCategoriaEventoRelatedByCatUsuCreaCriteria->equals($criteria)) {
					$this->collCategoriaEventosRelatedByCatUsuCrea = CategoriaEventoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCategoriaEventoRelatedByCatUsuCreaCriteria = $criteria;
		return $this->collCategoriaEventosRelatedByCatUsuCrea;
	}

	/**
	 * Returns the number of related CategoriaEvento objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CategoriaEvento objects.
	 * @throws     PropelException
	 */
	public function countCategoriaEventosRelatedByCatUsuCrea(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCategoriaEventosRelatedByCatUsuCrea === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CategoriaEventoPeer::CAT_USU_CREA, $this->usu_codigo);

				$count = CategoriaEventoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CategoriaEventoPeer::CAT_USU_CREA, $this->usu_codigo);

				if (!isset($this->lastCategoriaEventoRelatedByCatUsuCreaCriteria) || !$this->lastCategoriaEventoRelatedByCatUsuCreaCriteria->equals($criteria)) {
					$count = CategoriaEventoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCategoriaEventosRelatedByCatUsuCrea);
				}
			} else {
				$count = count($this->collCategoriaEventosRelatedByCatUsuCrea);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CategoriaEvento object to this object
	 * through the CategoriaEvento foreign key attribute.
	 *
	 * @param      CategoriaEvento $l CategoriaEvento
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCategoriaEventoRelatedByCatUsuCrea(CategoriaEvento $l)
	{
		if ($this->collCategoriaEventosRelatedByCatUsuCrea === null) {
			$this->initCategoriaEventosRelatedByCatUsuCrea();
		}
		if (!in_array($l, $this->collCategoriaEventosRelatedByCatUsuCrea, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCategoriaEventosRelatedByCatUsuCrea, $l);
			$l->setUsuarioRelatedByCatUsuCrea($this);
		}
	}

	/**
	 * Clears out the collCategoriaEventosRelatedByCatUsuActualiza collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCategoriaEventosRelatedByCatUsuActualiza()
	 */
	public function clearCategoriaEventosRelatedByCatUsuActualiza()
	{
		$this->collCategoriaEventosRelatedByCatUsuActualiza = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCategoriaEventosRelatedByCatUsuActualiza collection (array).
	 *
	 * By default this just sets the collCategoriaEventosRelatedByCatUsuActualiza collection to an empty array (like clearcollCategoriaEventosRelatedByCatUsuActualiza());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCategoriaEventosRelatedByCatUsuActualiza()
	{
		$this->collCategoriaEventosRelatedByCatUsuActualiza = array();
	}

	/**
	 * Gets an array of CategoriaEvento objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related CategoriaEventosRelatedByCatUsuActualiza from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CategoriaEvento[]
	 * @throws     PropelException
	 */
	public function getCategoriaEventosRelatedByCatUsuActualiza($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCategoriaEventosRelatedByCatUsuActualiza === null) {
			if ($this->isNew()) {
			   $this->collCategoriaEventosRelatedByCatUsuActualiza = array();
			} else {

				$criteria->add(CategoriaEventoPeer::CAT_USU_ACTUALIZA, $this->usu_codigo);

				CategoriaEventoPeer::addSelectColumns($criteria);
				$this->collCategoriaEventosRelatedByCatUsuActualiza = CategoriaEventoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CategoriaEventoPeer::CAT_USU_ACTUALIZA, $this->usu_codigo);

				CategoriaEventoPeer::addSelectColumns($criteria);
				if (!isset($this->lastCategoriaEventoRelatedByCatUsuActualizaCriteria) || !$this->lastCategoriaEventoRelatedByCatUsuActualizaCriteria->equals($criteria)) {
					$this->collCategoriaEventosRelatedByCatUsuActualiza = CategoriaEventoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCategoriaEventoRelatedByCatUsuActualizaCriteria = $criteria;
		return $this->collCategoriaEventosRelatedByCatUsuActualiza;
	}

	/**
	 * Returns the number of related CategoriaEvento objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CategoriaEvento objects.
	 * @throws     PropelException
	 */
	public function countCategoriaEventosRelatedByCatUsuActualiza(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCategoriaEventosRelatedByCatUsuActualiza === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CategoriaEventoPeer::CAT_USU_ACTUALIZA, $this->usu_codigo);

				$count = CategoriaEventoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CategoriaEventoPeer::CAT_USU_ACTUALIZA, $this->usu_codigo);

				if (!isset($this->lastCategoriaEventoRelatedByCatUsuActualizaCriteria) || !$this->lastCategoriaEventoRelatedByCatUsuActualizaCriteria->equals($criteria)) {
					$count = CategoriaEventoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCategoriaEventosRelatedByCatUsuActualiza);
				}
			} else {
				$count = count($this->collCategoriaEventosRelatedByCatUsuActualiza);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CategoriaEvento object to this object
	 * through the CategoriaEvento foreign key attribute.
	 *
	 * @param      CategoriaEvento $l CategoriaEvento
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCategoriaEventoRelatedByCatUsuActualiza(CategoriaEvento $l)
	{
		if ($this->collCategoriaEventosRelatedByCatUsuActualiza === null) {
			$this->initCategoriaEventosRelatedByCatUsuActualiza();
		}
		if (!in_array($l, $this->collCategoriaEventosRelatedByCatUsuActualiza, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCategoriaEventosRelatedByCatUsuActualiza, $l);
			$l->setUsuarioRelatedByCatUsuActualiza($this);
		}
	}

	/**
	 * Clears out the collEmpleadosRelatedByEmplUsuCodigo collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmpleadosRelatedByEmplUsuCodigo()
	 */
	public function clearEmpleadosRelatedByEmplUsuCodigo()
	{
		$this->collEmpleadosRelatedByEmplUsuCodigo = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmpleadosRelatedByEmplUsuCodigo collection (array).
	 *
	 * By default this just sets the collEmpleadosRelatedByEmplUsuCodigo collection to an empty array (like clearcollEmpleadosRelatedByEmplUsuCodigo());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmpleadosRelatedByEmplUsuCodigo()
	{
		$this->collEmpleadosRelatedByEmplUsuCodigo = array();
	}

	/**
	 * Gets an array of Empleado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related EmpleadosRelatedByEmplUsuCodigo from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Empleado[]
	 * @throws     PropelException
	 */
	public function getEmpleadosRelatedByEmplUsuCodigo($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleadosRelatedByEmplUsuCodigo === null) {
			if ($this->isNew()) {
			   $this->collEmpleadosRelatedByEmplUsuCodigo = array();
			} else {

				$criteria->add(EmpleadoPeer::EMPL_USU_CODIGO, $this->usu_codigo);

				EmpleadoPeer::addSelectColumns($criteria);
				$this->collEmpleadosRelatedByEmplUsuCodigo = EmpleadoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmpleadoPeer::EMPL_USU_CODIGO, $this->usu_codigo);

				EmpleadoPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmpleadoRelatedByEmplUsuCodigoCriteria) || !$this->lastEmpleadoRelatedByEmplUsuCodigoCriteria->equals($criteria)) {
					$this->collEmpleadosRelatedByEmplUsuCodigo = EmpleadoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmpleadoRelatedByEmplUsuCodigoCriteria = $criteria;
		return $this->collEmpleadosRelatedByEmplUsuCodigo;
	}

	/**
	 * Returns the number of related Empleado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Empleado objects.
	 * @throws     PropelException
	 */
	public function countEmpleadosRelatedByEmplUsuCodigo(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmpleadosRelatedByEmplUsuCodigo === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmpleadoPeer::EMPL_USU_CODIGO, $this->usu_codigo);

				$count = EmpleadoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmpleadoPeer::EMPL_USU_CODIGO, $this->usu_codigo);

				if (!isset($this->lastEmpleadoRelatedByEmplUsuCodigoCriteria) || !$this->lastEmpleadoRelatedByEmplUsuCodigoCriteria->equals($criteria)) {
					$count = EmpleadoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEmpleadosRelatedByEmplUsuCodigo);
				}
			} else {
				$count = count($this->collEmpleadosRelatedByEmplUsuCodigo);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Empleado object to this object
	 * through the Empleado foreign key attribute.
	 *
	 * @param      Empleado $l Empleado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmpleadoRelatedByEmplUsuCodigo(Empleado $l)
	{
		if ($this->collEmpleadosRelatedByEmplUsuCodigo === null) {
			$this->initEmpleadosRelatedByEmplUsuCodigo();
		}
		if (!in_array($l, $this->collEmpleadosRelatedByEmplUsuCodigo, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmpleadosRelatedByEmplUsuCodigo, $l);
			$l->setUsuarioRelatedByEmplUsuCodigo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related EmpleadosRelatedByEmplUsuCodigo from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getEmpleadosRelatedByEmplUsuCodigoJoinEmpresa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleadosRelatedByEmplUsuCodigo === null) {
			if ($this->isNew()) {
				$this->collEmpleadosRelatedByEmplUsuCodigo = array();
			} else {

				$criteria->add(EmpleadoPeer::EMPL_USU_CODIGO, $this->usu_codigo);

				$this->collEmpleadosRelatedByEmplUsuCodigo = EmpleadoPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpleadoPeer::EMPL_USU_CODIGO, $this->usu_codigo);

			if (!isset($this->lastEmpleadoRelatedByEmplUsuCodigoCriteria) || !$this->lastEmpleadoRelatedByEmplUsuCodigoCriteria->equals($criteria)) {
				$this->collEmpleadosRelatedByEmplUsuCodigo = EmpleadoPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpleadoRelatedByEmplUsuCodigoCriteria = $criteria;

		return $this->collEmpleadosRelatedByEmplUsuCodigo;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related EmpleadosRelatedByEmplUsuCodigo from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getEmpleadosRelatedByEmplUsuCodigoJoinTipoIdentificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleadosRelatedByEmplUsuCodigo === null) {
			if ($this->isNew()) {
				$this->collEmpleadosRelatedByEmplUsuCodigo = array();
			} else {

				$criteria->add(EmpleadoPeer::EMPL_USU_CODIGO, $this->usu_codigo);

				$this->collEmpleadosRelatedByEmplUsuCodigo = EmpleadoPeer::doSelectJoinTipoIdentificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpleadoPeer::EMPL_USU_CODIGO, $this->usu_codigo);

			if (!isset($this->lastEmpleadoRelatedByEmplUsuCodigoCriteria) || !$this->lastEmpleadoRelatedByEmplUsuCodigoCriteria->equals($criteria)) {
				$this->collEmpleadosRelatedByEmplUsuCodigo = EmpleadoPeer::doSelectJoinTipoIdentificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpleadoRelatedByEmplUsuCodigoCriteria = $criteria;

		return $this->collEmpleadosRelatedByEmplUsuCodigo;
	}

	/**
	 * Clears out the collEmpleadosRelatedByEmplUsuCrea collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmpleadosRelatedByEmplUsuCrea()
	 */
	public function clearEmpleadosRelatedByEmplUsuCrea()
	{
		$this->collEmpleadosRelatedByEmplUsuCrea = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmpleadosRelatedByEmplUsuCrea collection (array).
	 *
	 * By default this just sets the collEmpleadosRelatedByEmplUsuCrea collection to an empty array (like clearcollEmpleadosRelatedByEmplUsuCrea());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmpleadosRelatedByEmplUsuCrea()
	{
		$this->collEmpleadosRelatedByEmplUsuCrea = array();
	}

	/**
	 * Gets an array of Empleado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related EmpleadosRelatedByEmplUsuCrea from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Empleado[]
	 * @throws     PropelException
	 */
	public function getEmpleadosRelatedByEmplUsuCrea($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleadosRelatedByEmplUsuCrea === null) {
			if ($this->isNew()) {
			   $this->collEmpleadosRelatedByEmplUsuCrea = array();
			} else {

				$criteria->add(EmpleadoPeer::EMPL_USU_CREA, $this->usu_codigo);

				EmpleadoPeer::addSelectColumns($criteria);
				$this->collEmpleadosRelatedByEmplUsuCrea = EmpleadoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmpleadoPeer::EMPL_USU_CREA, $this->usu_codigo);

				EmpleadoPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmpleadoRelatedByEmplUsuCreaCriteria) || !$this->lastEmpleadoRelatedByEmplUsuCreaCriteria->equals($criteria)) {
					$this->collEmpleadosRelatedByEmplUsuCrea = EmpleadoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmpleadoRelatedByEmplUsuCreaCriteria = $criteria;
		return $this->collEmpleadosRelatedByEmplUsuCrea;
	}

	/**
	 * Returns the number of related Empleado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Empleado objects.
	 * @throws     PropelException
	 */
	public function countEmpleadosRelatedByEmplUsuCrea(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmpleadosRelatedByEmplUsuCrea === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmpleadoPeer::EMPL_USU_CREA, $this->usu_codigo);

				$count = EmpleadoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmpleadoPeer::EMPL_USU_CREA, $this->usu_codigo);

				if (!isset($this->lastEmpleadoRelatedByEmplUsuCreaCriteria) || !$this->lastEmpleadoRelatedByEmplUsuCreaCriteria->equals($criteria)) {
					$count = EmpleadoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEmpleadosRelatedByEmplUsuCrea);
				}
			} else {
				$count = count($this->collEmpleadosRelatedByEmplUsuCrea);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Empleado object to this object
	 * through the Empleado foreign key attribute.
	 *
	 * @param      Empleado $l Empleado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmpleadoRelatedByEmplUsuCrea(Empleado $l)
	{
		if ($this->collEmpleadosRelatedByEmplUsuCrea === null) {
			$this->initEmpleadosRelatedByEmplUsuCrea();
		}
		if (!in_array($l, $this->collEmpleadosRelatedByEmplUsuCrea, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmpleadosRelatedByEmplUsuCrea, $l);
			$l->setUsuarioRelatedByEmplUsuCrea($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related EmpleadosRelatedByEmplUsuCrea from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getEmpleadosRelatedByEmplUsuCreaJoinEmpresa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleadosRelatedByEmplUsuCrea === null) {
			if ($this->isNew()) {
				$this->collEmpleadosRelatedByEmplUsuCrea = array();
			} else {

				$criteria->add(EmpleadoPeer::EMPL_USU_CREA, $this->usu_codigo);

				$this->collEmpleadosRelatedByEmplUsuCrea = EmpleadoPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpleadoPeer::EMPL_USU_CREA, $this->usu_codigo);

			if (!isset($this->lastEmpleadoRelatedByEmplUsuCreaCriteria) || !$this->lastEmpleadoRelatedByEmplUsuCreaCriteria->equals($criteria)) {
				$this->collEmpleadosRelatedByEmplUsuCrea = EmpleadoPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpleadoRelatedByEmplUsuCreaCriteria = $criteria;

		return $this->collEmpleadosRelatedByEmplUsuCrea;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related EmpleadosRelatedByEmplUsuCrea from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getEmpleadosRelatedByEmplUsuCreaJoinTipoIdentificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleadosRelatedByEmplUsuCrea === null) {
			if ($this->isNew()) {
				$this->collEmpleadosRelatedByEmplUsuCrea = array();
			} else {

				$criteria->add(EmpleadoPeer::EMPL_USU_CREA, $this->usu_codigo);

				$this->collEmpleadosRelatedByEmplUsuCrea = EmpleadoPeer::doSelectJoinTipoIdentificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpleadoPeer::EMPL_USU_CREA, $this->usu_codigo);

			if (!isset($this->lastEmpleadoRelatedByEmplUsuCreaCriteria) || !$this->lastEmpleadoRelatedByEmplUsuCreaCriteria->equals($criteria)) {
				$this->collEmpleadosRelatedByEmplUsuCrea = EmpleadoPeer::doSelectJoinTipoIdentificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpleadoRelatedByEmplUsuCreaCriteria = $criteria;

		return $this->collEmpleadosRelatedByEmplUsuCrea;
	}

	/**
	 * Clears out the collEmpleadosRelatedByEmplUsuActualiza collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmpleadosRelatedByEmplUsuActualiza()
	 */
	public function clearEmpleadosRelatedByEmplUsuActualiza()
	{
		$this->collEmpleadosRelatedByEmplUsuActualiza = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmpleadosRelatedByEmplUsuActualiza collection (array).
	 *
	 * By default this just sets the collEmpleadosRelatedByEmplUsuActualiza collection to an empty array (like clearcollEmpleadosRelatedByEmplUsuActualiza());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmpleadosRelatedByEmplUsuActualiza()
	{
		$this->collEmpleadosRelatedByEmplUsuActualiza = array();
	}

	/**
	 * Gets an array of Empleado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related EmpleadosRelatedByEmplUsuActualiza from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Empleado[]
	 * @throws     PropelException
	 */
	public function getEmpleadosRelatedByEmplUsuActualiza($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleadosRelatedByEmplUsuActualiza === null) {
			if ($this->isNew()) {
			   $this->collEmpleadosRelatedByEmplUsuActualiza = array();
			} else {

				$criteria->add(EmpleadoPeer::EMPL_USU_ACTUALIZA, $this->usu_codigo);

				EmpleadoPeer::addSelectColumns($criteria);
				$this->collEmpleadosRelatedByEmplUsuActualiza = EmpleadoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmpleadoPeer::EMPL_USU_ACTUALIZA, $this->usu_codigo);

				EmpleadoPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmpleadoRelatedByEmplUsuActualizaCriteria) || !$this->lastEmpleadoRelatedByEmplUsuActualizaCriteria->equals($criteria)) {
					$this->collEmpleadosRelatedByEmplUsuActualiza = EmpleadoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmpleadoRelatedByEmplUsuActualizaCriteria = $criteria;
		return $this->collEmpleadosRelatedByEmplUsuActualiza;
	}

	/**
	 * Returns the number of related Empleado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Empleado objects.
	 * @throws     PropelException
	 */
	public function countEmpleadosRelatedByEmplUsuActualiza(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmpleadosRelatedByEmplUsuActualiza === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmpleadoPeer::EMPL_USU_ACTUALIZA, $this->usu_codigo);

				$count = EmpleadoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmpleadoPeer::EMPL_USU_ACTUALIZA, $this->usu_codigo);

				if (!isset($this->lastEmpleadoRelatedByEmplUsuActualizaCriteria) || !$this->lastEmpleadoRelatedByEmplUsuActualizaCriteria->equals($criteria)) {
					$count = EmpleadoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEmpleadosRelatedByEmplUsuActualiza);
				}
			} else {
				$count = count($this->collEmpleadosRelatedByEmplUsuActualiza);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Empleado object to this object
	 * through the Empleado foreign key attribute.
	 *
	 * @param      Empleado $l Empleado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmpleadoRelatedByEmplUsuActualiza(Empleado $l)
	{
		if ($this->collEmpleadosRelatedByEmplUsuActualiza === null) {
			$this->initEmpleadosRelatedByEmplUsuActualiza();
		}
		if (!in_array($l, $this->collEmpleadosRelatedByEmplUsuActualiza, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmpleadosRelatedByEmplUsuActualiza, $l);
			$l->setUsuarioRelatedByEmplUsuActualiza($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related EmpleadosRelatedByEmplUsuActualiza from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getEmpleadosRelatedByEmplUsuActualizaJoinEmpresa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleadosRelatedByEmplUsuActualiza === null) {
			if ($this->isNew()) {
				$this->collEmpleadosRelatedByEmplUsuActualiza = array();
			} else {

				$criteria->add(EmpleadoPeer::EMPL_USU_ACTUALIZA, $this->usu_codigo);

				$this->collEmpleadosRelatedByEmplUsuActualiza = EmpleadoPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpleadoPeer::EMPL_USU_ACTUALIZA, $this->usu_codigo);

			if (!isset($this->lastEmpleadoRelatedByEmplUsuActualizaCriteria) || !$this->lastEmpleadoRelatedByEmplUsuActualizaCriteria->equals($criteria)) {
				$this->collEmpleadosRelatedByEmplUsuActualiza = EmpleadoPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpleadoRelatedByEmplUsuActualizaCriteria = $criteria;

		return $this->collEmpleadosRelatedByEmplUsuActualiza;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related EmpleadosRelatedByEmplUsuActualiza from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getEmpleadosRelatedByEmplUsuActualizaJoinTipoIdentificacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleadosRelatedByEmplUsuActualiza === null) {
			if ($this->isNew()) {
				$this->collEmpleadosRelatedByEmplUsuActualiza = array();
			} else {

				$criteria->add(EmpleadoPeer::EMPL_USU_ACTUALIZA, $this->usu_codigo);

				$this->collEmpleadosRelatedByEmplUsuActualiza = EmpleadoPeer::doSelectJoinTipoIdentificacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpleadoPeer::EMPL_USU_ACTUALIZA, $this->usu_codigo);

			if (!isset($this->lastEmpleadoRelatedByEmplUsuActualizaCriteria) || !$this->lastEmpleadoRelatedByEmplUsuActualizaCriteria->equals($criteria)) {
				$this->collEmpleadosRelatedByEmplUsuActualiza = EmpleadoPeer::doSelectJoinTipoIdentificacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpleadoRelatedByEmplUsuActualizaCriteria = $criteria;

		return $this->collEmpleadosRelatedByEmplUsuActualiza;
	}

	/**
	 * Clears out the collEmpresasRelatedByEmpUsuCrea collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmpresasRelatedByEmpUsuCrea()
	 */
	public function clearEmpresasRelatedByEmpUsuCrea()
	{
		$this->collEmpresasRelatedByEmpUsuCrea = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmpresasRelatedByEmpUsuCrea collection (array).
	 *
	 * By default this just sets the collEmpresasRelatedByEmpUsuCrea collection to an empty array (like clearcollEmpresasRelatedByEmpUsuCrea());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmpresasRelatedByEmpUsuCrea()
	{
		$this->collEmpresasRelatedByEmpUsuCrea = array();
	}

	/**
	 * Gets an array of Empresa objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related EmpresasRelatedByEmpUsuCrea from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Empresa[]
	 * @throws     PropelException
	 */
	public function getEmpresasRelatedByEmpUsuCrea($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpresasRelatedByEmpUsuCrea === null) {
			if ($this->isNew()) {
			   $this->collEmpresasRelatedByEmpUsuCrea = array();
			} else {

				$criteria->add(EmpresaPeer::EMP_USU_CREA, $this->usu_codigo);

				EmpresaPeer::addSelectColumns($criteria);
				$this->collEmpresasRelatedByEmpUsuCrea = EmpresaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmpresaPeer::EMP_USU_CREA, $this->usu_codigo);

				EmpresaPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmpresaRelatedByEmpUsuCreaCriteria) || !$this->lastEmpresaRelatedByEmpUsuCreaCriteria->equals($criteria)) {
					$this->collEmpresasRelatedByEmpUsuCrea = EmpresaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmpresaRelatedByEmpUsuCreaCriteria = $criteria;
		return $this->collEmpresasRelatedByEmpUsuCrea;
	}

	/**
	 * Returns the number of related Empresa objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Empresa objects.
	 * @throws     PropelException
	 */
	public function countEmpresasRelatedByEmpUsuCrea(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmpresasRelatedByEmpUsuCrea === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmpresaPeer::EMP_USU_CREA, $this->usu_codigo);

				$count = EmpresaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmpresaPeer::EMP_USU_CREA, $this->usu_codigo);

				if (!isset($this->lastEmpresaRelatedByEmpUsuCreaCriteria) || !$this->lastEmpresaRelatedByEmpUsuCreaCriteria->equals($criteria)) {
					$count = EmpresaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEmpresasRelatedByEmpUsuCrea);
				}
			} else {
				$count = count($this->collEmpresasRelatedByEmpUsuCrea);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Empresa object to this object
	 * through the Empresa foreign key attribute.
	 *
	 * @param      Empresa $l Empresa
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmpresaRelatedByEmpUsuCrea(Empresa $l)
	{
		if ($this->collEmpresasRelatedByEmpUsuCrea === null) {
			$this->initEmpresasRelatedByEmpUsuCrea();
		}
		if (!in_array($l, $this->collEmpresasRelatedByEmpUsuCrea, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmpresasRelatedByEmpUsuCrea, $l);
			$l->setUsuarioRelatedByEmpUsuCrea($this);
		}
	}

	/**
	 * Clears out the collEmpresasRelatedByEmpUsuActualiza collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmpresasRelatedByEmpUsuActualiza()
	 */
	public function clearEmpresasRelatedByEmpUsuActualiza()
	{
		$this->collEmpresasRelatedByEmpUsuActualiza = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmpresasRelatedByEmpUsuActualiza collection (array).
	 *
	 * By default this just sets the collEmpresasRelatedByEmpUsuActualiza collection to an empty array (like clearcollEmpresasRelatedByEmpUsuActualiza());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmpresasRelatedByEmpUsuActualiza()
	{
		$this->collEmpresasRelatedByEmpUsuActualiza = array();
	}

	/**
	 * Gets an array of Empresa objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related EmpresasRelatedByEmpUsuActualiza from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Empresa[]
	 * @throws     PropelException
	 */
	public function getEmpresasRelatedByEmpUsuActualiza($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpresasRelatedByEmpUsuActualiza === null) {
			if ($this->isNew()) {
			   $this->collEmpresasRelatedByEmpUsuActualiza = array();
			} else {

				$criteria->add(EmpresaPeer::EMP_USU_ACTUALIZA, $this->usu_codigo);

				EmpresaPeer::addSelectColumns($criteria);
				$this->collEmpresasRelatedByEmpUsuActualiza = EmpresaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmpresaPeer::EMP_USU_ACTUALIZA, $this->usu_codigo);

				EmpresaPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmpresaRelatedByEmpUsuActualizaCriteria) || !$this->lastEmpresaRelatedByEmpUsuActualizaCriteria->equals($criteria)) {
					$this->collEmpresasRelatedByEmpUsuActualiza = EmpresaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmpresaRelatedByEmpUsuActualizaCriteria = $criteria;
		return $this->collEmpresasRelatedByEmpUsuActualiza;
	}

	/**
	 * Returns the number of related Empresa objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Empresa objects.
	 * @throws     PropelException
	 */
	public function countEmpresasRelatedByEmpUsuActualiza(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmpresasRelatedByEmpUsuActualiza === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmpresaPeer::EMP_USU_ACTUALIZA, $this->usu_codigo);

				$count = EmpresaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmpresaPeer::EMP_USU_ACTUALIZA, $this->usu_codigo);

				if (!isset($this->lastEmpresaRelatedByEmpUsuActualizaCriteria) || !$this->lastEmpresaRelatedByEmpUsuActualizaCriteria->equals($criteria)) {
					$count = EmpresaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEmpresasRelatedByEmpUsuActualiza);
				}
			} else {
				$count = count($this->collEmpresasRelatedByEmpUsuActualiza);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Empresa object to this object
	 * through the Empresa foreign key attribute.
	 *
	 * @param      Empresa $l Empresa
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmpresaRelatedByEmpUsuActualiza(Empresa $l)
	{
		if ($this->collEmpresasRelatedByEmpUsuActualiza === null) {
			$this->initEmpresasRelatedByEmpUsuActualiza();
		}
		if (!in_array($l, $this->collEmpresasRelatedByEmpUsuActualiza, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmpresasRelatedByEmpUsuActualiza, $l);
			$l->setUsuarioRelatedByEmpUsuActualiza($this);
		}
	}

	/**
	 * Clears out the collEstadosRelatedByEstUsuCrea collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEstadosRelatedByEstUsuCrea()
	 */
	public function clearEstadosRelatedByEstUsuCrea()
	{
		$this->collEstadosRelatedByEstUsuCrea = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEstadosRelatedByEstUsuCrea collection (array).
	 *
	 * By default this just sets the collEstadosRelatedByEstUsuCrea collection to an empty array (like clearcollEstadosRelatedByEstUsuCrea());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEstadosRelatedByEstUsuCrea()
	{
		$this->collEstadosRelatedByEstUsuCrea = array();
	}

	/**
	 * Gets an array of Estado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related EstadosRelatedByEstUsuCrea from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Estado[]
	 * @throws     PropelException
	 */
	public function getEstadosRelatedByEstUsuCrea($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEstadosRelatedByEstUsuCrea === null) {
			if ($this->isNew()) {
			   $this->collEstadosRelatedByEstUsuCrea = array();
			} else {

				$criteria->add(EstadoPeer::EST_USU_CREA, $this->usu_codigo);

				EstadoPeer::addSelectColumns($criteria);
				$this->collEstadosRelatedByEstUsuCrea = EstadoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EstadoPeer::EST_USU_CREA, $this->usu_codigo);

				EstadoPeer::addSelectColumns($criteria);
				if (!isset($this->lastEstadoRelatedByEstUsuCreaCriteria) || !$this->lastEstadoRelatedByEstUsuCreaCriteria->equals($criteria)) {
					$this->collEstadosRelatedByEstUsuCrea = EstadoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEstadoRelatedByEstUsuCreaCriteria = $criteria;
		return $this->collEstadosRelatedByEstUsuCrea;
	}

	/**
	 * Returns the number of related Estado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Estado objects.
	 * @throws     PropelException
	 */
	public function countEstadosRelatedByEstUsuCrea(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEstadosRelatedByEstUsuCrea === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EstadoPeer::EST_USU_CREA, $this->usu_codigo);

				$count = EstadoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EstadoPeer::EST_USU_CREA, $this->usu_codigo);

				if (!isset($this->lastEstadoRelatedByEstUsuCreaCriteria) || !$this->lastEstadoRelatedByEstUsuCreaCriteria->equals($criteria)) {
					$count = EstadoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEstadosRelatedByEstUsuCrea);
				}
			} else {
				$count = count($this->collEstadosRelatedByEstUsuCrea);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Estado object to this object
	 * through the Estado foreign key attribute.
	 *
	 * @param      Estado $l Estado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEstadoRelatedByEstUsuCrea(Estado $l)
	{
		if ($this->collEstadosRelatedByEstUsuCrea === null) {
			$this->initEstadosRelatedByEstUsuCrea();
		}
		if (!in_array($l, $this->collEstadosRelatedByEstUsuCrea, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEstadosRelatedByEstUsuCrea, $l);
			$l->setUsuarioRelatedByEstUsuCrea($this);
		}
	}

	/**
	 * Clears out the collEstadosRelatedByEstUsuActualiza collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEstadosRelatedByEstUsuActualiza()
	 */
	public function clearEstadosRelatedByEstUsuActualiza()
	{
		$this->collEstadosRelatedByEstUsuActualiza = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEstadosRelatedByEstUsuActualiza collection (array).
	 *
	 * By default this just sets the collEstadosRelatedByEstUsuActualiza collection to an empty array (like clearcollEstadosRelatedByEstUsuActualiza());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEstadosRelatedByEstUsuActualiza()
	{
		$this->collEstadosRelatedByEstUsuActualiza = array();
	}

	/**
	 * Gets an array of Estado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related EstadosRelatedByEstUsuActualiza from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Estado[]
	 * @throws     PropelException
	 */
	public function getEstadosRelatedByEstUsuActualiza($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEstadosRelatedByEstUsuActualiza === null) {
			if ($this->isNew()) {
			   $this->collEstadosRelatedByEstUsuActualiza = array();
			} else {

				$criteria->add(EstadoPeer::EST_USU_ACTUALIZA, $this->usu_codigo);

				EstadoPeer::addSelectColumns($criteria);
				$this->collEstadosRelatedByEstUsuActualiza = EstadoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EstadoPeer::EST_USU_ACTUALIZA, $this->usu_codigo);

				EstadoPeer::addSelectColumns($criteria);
				if (!isset($this->lastEstadoRelatedByEstUsuActualizaCriteria) || !$this->lastEstadoRelatedByEstUsuActualizaCriteria->equals($criteria)) {
					$this->collEstadosRelatedByEstUsuActualiza = EstadoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEstadoRelatedByEstUsuActualizaCriteria = $criteria;
		return $this->collEstadosRelatedByEstUsuActualiza;
	}

	/**
	 * Returns the number of related Estado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Estado objects.
	 * @throws     PropelException
	 */
	public function countEstadosRelatedByEstUsuActualiza(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEstadosRelatedByEstUsuActualiza === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EstadoPeer::EST_USU_ACTUALIZA, $this->usu_codigo);

				$count = EstadoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EstadoPeer::EST_USU_ACTUALIZA, $this->usu_codigo);

				if (!isset($this->lastEstadoRelatedByEstUsuActualizaCriteria) || !$this->lastEstadoRelatedByEstUsuActualizaCriteria->equals($criteria)) {
					$count = EstadoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEstadosRelatedByEstUsuActualiza);
				}
			} else {
				$count = count($this->collEstadosRelatedByEstUsuActualiza);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Estado object to this object
	 * through the Estado foreign key attribute.
	 *
	 * @param      Estado $l Estado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEstadoRelatedByEstUsuActualiza(Estado $l)
	{
		if ($this->collEstadosRelatedByEstUsuActualiza === null) {
			$this->initEstadosRelatedByEstUsuActualiza();
		}
		if (!in_array($l, $this->collEstadosRelatedByEstUsuActualiza, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEstadosRelatedByEstUsuActualiza, $l);
			$l->setUsuarioRelatedByEstUsuActualiza($this);
		}
	}

	/**
	 * Clears out the collEventosRelatedByEveUsuCrea collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEventosRelatedByEveUsuCrea()
	 */
	public function clearEventosRelatedByEveUsuCrea()
	{
		$this->collEventosRelatedByEveUsuCrea = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEventosRelatedByEveUsuCrea collection (array).
	 *
	 * By default this just sets the collEventosRelatedByEveUsuCrea collection to an empty array (like clearcollEventosRelatedByEveUsuCrea());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEventosRelatedByEveUsuCrea()
	{
		$this->collEventosRelatedByEveUsuCrea = array();
	}

	/**
	 * Gets an array of Evento objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related EventosRelatedByEveUsuCrea from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Evento[]
	 * @throws     PropelException
	 */
	public function getEventosRelatedByEveUsuCrea($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventosRelatedByEveUsuCrea === null) {
			if ($this->isNew()) {
			   $this->collEventosRelatedByEveUsuCrea = array();
			} else {

				$criteria->add(EventoPeer::EVE_USU_CREA, $this->usu_codigo);

				EventoPeer::addSelectColumns($criteria);
				$this->collEventosRelatedByEveUsuCrea = EventoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EventoPeer::EVE_USU_CREA, $this->usu_codigo);

				EventoPeer::addSelectColumns($criteria);
				if (!isset($this->lastEventoRelatedByEveUsuCreaCriteria) || !$this->lastEventoRelatedByEveUsuCreaCriteria->equals($criteria)) {
					$this->collEventosRelatedByEveUsuCrea = EventoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEventoRelatedByEveUsuCreaCriteria = $criteria;
		return $this->collEventosRelatedByEveUsuCrea;
	}

	/**
	 * Returns the number of related Evento objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Evento objects.
	 * @throws     PropelException
	 */
	public function countEventosRelatedByEveUsuCrea(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEventosRelatedByEveUsuCrea === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EventoPeer::EVE_USU_CREA, $this->usu_codigo);

				$count = EventoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EventoPeer::EVE_USU_CREA, $this->usu_codigo);

				if (!isset($this->lastEventoRelatedByEveUsuCreaCriteria) || !$this->lastEventoRelatedByEveUsuCreaCriteria->equals($criteria)) {
					$count = EventoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEventosRelatedByEveUsuCrea);
				}
			} else {
				$count = count($this->collEventosRelatedByEveUsuCrea);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Evento object to this object
	 * through the Evento foreign key attribute.
	 *
	 * @param      Evento $l Evento
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEventoRelatedByEveUsuCrea(Evento $l)
	{
		if ($this->collEventosRelatedByEveUsuCrea === null) {
			$this->initEventosRelatedByEveUsuCrea();
		}
		if (!in_array($l, $this->collEventosRelatedByEveUsuCrea, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEventosRelatedByEveUsuCrea, $l);
			$l->setUsuarioRelatedByEveUsuCrea($this);
		}
	}

	/**
	 * Clears out the collEventosRelatedByEveUsuActualiza collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEventosRelatedByEveUsuActualiza()
	 */
	public function clearEventosRelatedByEveUsuActualiza()
	{
		$this->collEventosRelatedByEveUsuActualiza = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEventosRelatedByEveUsuActualiza collection (array).
	 *
	 * By default this just sets the collEventosRelatedByEveUsuActualiza collection to an empty array (like clearcollEventosRelatedByEveUsuActualiza());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEventosRelatedByEveUsuActualiza()
	{
		$this->collEventosRelatedByEveUsuActualiza = array();
	}

	/**
	 * Gets an array of Evento objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related EventosRelatedByEveUsuActualiza from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Evento[]
	 * @throws     PropelException
	 */
	public function getEventosRelatedByEveUsuActualiza($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventosRelatedByEveUsuActualiza === null) {
			if ($this->isNew()) {
			   $this->collEventosRelatedByEveUsuActualiza = array();
			} else {

				$criteria->add(EventoPeer::EVE_USU_ACTUALIZA, $this->usu_codigo);

				EventoPeer::addSelectColumns($criteria);
				$this->collEventosRelatedByEveUsuActualiza = EventoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EventoPeer::EVE_USU_ACTUALIZA, $this->usu_codigo);

				EventoPeer::addSelectColumns($criteria);
				if (!isset($this->lastEventoRelatedByEveUsuActualizaCriteria) || !$this->lastEventoRelatedByEveUsuActualizaCriteria->equals($criteria)) {
					$this->collEventosRelatedByEveUsuActualiza = EventoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEventoRelatedByEveUsuActualizaCriteria = $criteria;
		return $this->collEventosRelatedByEveUsuActualiza;
	}

	/**
	 * Returns the number of related Evento objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Evento objects.
	 * @throws     PropelException
	 */
	public function countEventosRelatedByEveUsuActualiza(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEventosRelatedByEveUsuActualiza === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EventoPeer::EVE_USU_ACTUALIZA, $this->usu_codigo);

				$count = EventoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EventoPeer::EVE_USU_ACTUALIZA, $this->usu_codigo);

				if (!isset($this->lastEventoRelatedByEveUsuActualizaCriteria) || !$this->lastEventoRelatedByEveUsuActualizaCriteria->equals($criteria)) {
					$count = EventoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEventosRelatedByEveUsuActualiza);
				}
			} else {
				$count = count($this->collEventosRelatedByEveUsuActualiza);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Evento object to this object
	 * through the Evento foreign key attribute.
	 *
	 * @param      Evento $l Evento
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEventoRelatedByEveUsuActualiza(Evento $l)
	{
		if ($this->collEventosRelatedByEveUsuActualiza === null) {
			$this->initEventosRelatedByEveUsuActualiza();
		}
		if (!in_array($l, $this->collEventosRelatedByEveUsuActualiza, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEventosRelatedByEveUsuActualiza, $l);
			$l->setUsuarioRelatedByEveUsuActualiza($this);
		}
	}

	/**
	 * Clears out the collEventoEnRegistrosRelatedByEvrgUsuCrea collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEventoEnRegistrosRelatedByEvrgUsuCrea()
	 */
	public function clearEventoEnRegistrosRelatedByEvrgUsuCrea()
	{
		$this->collEventoEnRegistrosRelatedByEvrgUsuCrea = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEventoEnRegistrosRelatedByEvrgUsuCrea collection (array).
	 *
	 * By default this just sets the collEventoEnRegistrosRelatedByEvrgUsuCrea collection to an empty array (like clearcollEventoEnRegistrosRelatedByEvrgUsuCrea());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEventoEnRegistrosRelatedByEvrgUsuCrea()
	{
		$this->collEventoEnRegistrosRelatedByEvrgUsuCrea = array();
	}

	/**
	 * Gets an array of EventoEnRegistro objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related EventoEnRegistrosRelatedByEvrgUsuCrea from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EventoEnRegistro[]
	 * @throws     PropelException
	 */
	public function getEventoEnRegistrosRelatedByEvrgUsuCrea($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventoEnRegistrosRelatedByEvrgUsuCrea === null) {
			if ($this->isNew()) {
			   $this->collEventoEnRegistrosRelatedByEvrgUsuCrea = array();
			} else {

				$criteria->add(EventoEnRegistroPeer::EVRG_USU_CREA, $this->usu_codigo);

				EventoEnRegistroPeer::addSelectColumns($criteria);
				$this->collEventoEnRegistrosRelatedByEvrgUsuCrea = EventoEnRegistroPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EventoEnRegistroPeer::EVRG_USU_CREA, $this->usu_codigo);

				EventoEnRegistroPeer::addSelectColumns($criteria);
				if (!isset($this->lastEventoEnRegistroRelatedByEvrgUsuCreaCriteria) || !$this->lastEventoEnRegistroRelatedByEvrgUsuCreaCriteria->equals($criteria)) {
					$this->collEventoEnRegistrosRelatedByEvrgUsuCrea = EventoEnRegistroPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEventoEnRegistroRelatedByEvrgUsuCreaCriteria = $criteria;
		return $this->collEventoEnRegistrosRelatedByEvrgUsuCrea;
	}

	/**
	 * Returns the number of related EventoEnRegistro objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EventoEnRegistro objects.
	 * @throws     PropelException
	 */
	public function countEventoEnRegistrosRelatedByEvrgUsuCrea(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEventoEnRegistrosRelatedByEvrgUsuCrea === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EventoEnRegistroPeer::EVRG_USU_CREA, $this->usu_codigo);

				$count = EventoEnRegistroPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EventoEnRegistroPeer::EVRG_USU_CREA, $this->usu_codigo);

				if (!isset($this->lastEventoEnRegistroRelatedByEvrgUsuCreaCriteria) || !$this->lastEventoEnRegistroRelatedByEvrgUsuCreaCriteria->equals($criteria)) {
					$count = EventoEnRegistroPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEventoEnRegistrosRelatedByEvrgUsuCrea);
				}
			} else {
				$count = count($this->collEventoEnRegistrosRelatedByEvrgUsuCrea);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EventoEnRegistro object to this object
	 * through the EventoEnRegistro foreign key attribute.
	 *
	 * @param      EventoEnRegistro $l EventoEnRegistro
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEventoEnRegistroRelatedByEvrgUsuCrea(EventoEnRegistro $l)
	{
		if ($this->collEventoEnRegistrosRelatedByEvrgUsuCrea === null) {
			$this->initEventoEnRegistrosRelatedByEvrgUsuCrea();
		}
		if (!in_array($l, $this->collEventoEnRegistrosRelatedByEvrgUsuCrea, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEventoEnRegistrosRelatedByEvrgUsuCrea, $l);
			$l->setUsuarioRelatedByEvrgUsuCrea($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related EventoEnRegistrosRelatedByEvrgUsuCrea from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getEventoEnRegistrosRelatedByEvrgUsuCreaJoinRegistroUsoMaquina($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventoEnRegistrosRelatedByEvrgUsuCrea === null) {
			if ($this->isNew()) {
				$this->collEventoEnRegistrosRelatedByEvrgUsuCrea = array();
			} else {

				$criteria->add(EventoEnRegistroPeer::EVRG_USU_CREA, $this->usu_codigo);

				$this->collEventoEnRegistrosRelatedByEvrgUsuCrea = EventoEnRegistroPeer::doSelectJoinRegistroUsoMaquina($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventoEnRegistroPeer::EVRG_USU_CREA, $this->usu_codigo);

			if (!isset($this->lastEventoEnRegistroRelatedByEvrgUsuCreaCriteria) || !$this->lastEventoEnRegistroRelatedByEvrgUsuCreaCriteria->equals($criteria)) {
				$this->collEventoEnRegistrosRelatedByEvrgUsuCrea = EventoEnRegistroPeer::doSelectJoinRegistroUsoMaquina($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventoEnRegistroRelatedByEvrgUsuCreaCriteria = $criteria;

		return $this->collEventoEnRegistrosRelatedByEvrgUsuCrea;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related EventoEnRegistrosRelatedByEvrgUsuCrea from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getEventoEnRegistrosRelatedByEvrgUsuCreaJoinEvento($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventoEnRegistrosRelatedByEvrgUsuCrea === null) {
			if ($this->isNew()) {
				$this->collEventoEnRegistrosRelatedByEvrgUsuCrea = array();
			} else {

				$criteria->add(EventoEnRegistroPeer::EVRG_USU_CREA, $this->usu_codigo);

				$this->collEventoEnRegistrosRelatedByEvrgUsuCrea = EventoEnRegistroPeer::doSelectJoinEvento($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventoEnRegistroPeer::EVRG_USU_CREA, $this->usu_codigo);

			if (!isset($this->lastEventoEnRegistroRelatedByEvrgUsuCreaCriteria) || !$this->lastEventoEnRegistroRelatedByEvrgUsuCreaCriteria->equals($criteria)) {
				$this->collEventoEnRegistrosRelatedByEvrgUsuCrea = EventoEnRegistroPeer::doSelectJoinEvento($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventoEnRegistroRelatedByEvrgUsuCreaCriteria = $criteria;

		return $this->collEventoEnRegistrosRelatedByEvrgUsuCrea;
	}

	/**
	 * Clears out the collEventoEnRegistrosRelatedByEvrgUsuActualiza collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEventoEnRegistrosRelatedByEvrgUsuActualiza()
	 */
	public function clearEventoEnRegistrosRelatedByEvrgUsuActualiza()
	{
		$this->collEventoEnRegistrosRelatedByEvrgUsuActualiza = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEventoEnRegistrosRelatedByEvrgUsuActualiza collection (array).
	 *
	 * By default this just sets the collEventoEnRegistrosRelatedByEvrgUsuActualiza collection to an empty array (like clearcollEventoEnRegistrosRelatedByEvrgUsuActualiza());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEventoEnRegistrosRelatedByEvrgUsuActualiza()
	{
		$this->collEventoEnRegistrosRelatedByEvrgUsuActualiza = array();
	}

	/**
	 * Gets an array of EventoEnRegistro objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related EventoEnRegistrosRelatedByEvrgUsuActualiza from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EventoEnRegistro[]
	 * @throws     PropelException
	 */
	public function getEventoEnRegistrosRelatedByEvrgUsuActualiza($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventoEnRegistrosRelatedByEvrgUsuActualiza === null) {
			if ($this->isNew()) {
			   $this->collEventoEnRegistrosRelatedByEvrgUsuActualiza = array();
			} else {

				$criteria->add(EventoEnRegistroPeer::EVRG_USU_ACTUALIZA, $this->usu_codigo);

				EventoEnRegistroPeer::addSelectColumns($criteria);
				$this->collEventoEnRegistrosRelatedByEvrgUsuActualiza = EventoEnRegistroPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EventoEnRegistroPeer::EVRG_USU_ACTUALIZA, $this->usu_codigo);

				EventoEnRegistroPeer::addSelectColumns($criteria);
				if (!isset($this->lastEventoEnRegistroRelatedByEvrgUsuActualizaCriteria) || !$this->lastEventoEnRegistroRelatedByEvrgUsuActualizaCriteria->equals($criteria)) {
					$this->collEventoEnRegistrosRelatedByEvrgUsuActualiza = EventoEnRegistroPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEventoEnRegistroRelatedByEvrgUsuActualizaCriteria = $criteria;
		return $this->collEventoEnRegistrosRelatedByEvrgUsuActualiza;
	}

	/**
	 * Returns the number of related EventoEnRegistro objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EventoEnRegistro objects.
	 * @throws     PropelException
	 */
	public function countEventoEnRegistrosRelatedByEvrgUsuActualiza(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEventoEnRegistrosRelatedByEvrgUsuActualiza === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EventoEnRegistroPeer::EVRG_USU_ACTUALIZA, $this->usu_codigo);

				$count = EventoEnRegistroPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EventoEnRegistroPeer::EVRG_USU_ACTUALIZA, $this->usu_codigo);

				if (!isset($this->lastEventoEnRegistroRelatedByEvrgUsuActualizaCriteria) || !$this->lastEventoEnRegistroRelatedByEvrgUsuActualizaCriteria->equals($criteria)) {
					$count = EventoEnRegistroPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEventoEnRegistrosRelatedByEvrgUsuActualiza);
				}
			} else {
				$count = count($this->collEventoEnRegistrosRelatedByEvrgUsuActualiza);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EventoEnRegistro object to this object
	 * through the EventoEnRegistro foreign key attribute.
	 *
	 * @param      EventoEnRegistro $l EventoEnRegistro
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEventoEnRegistroRelatedByEvrgUsuActualiza(EventoEnRegistro $l)
	{
		if ($this->collEventoEnRegistrosRelatedByEvrgUsuActualiza === null) {
			$this->initEventoEnRegistrosRelatedByEvrgUsuActualiza();
		}
		if (!in_array($l, $this->collEventoEnRegistrosRelatedByEvrgUsuActualiza, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEventoEnRegistrosRelatedByEvrgUsuActualiza, $l);
			$l->setUsuarioRelatedByEvrgUsuActualiza($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related EventoEnRegistrosRelatedByEvrgUsuActualiza from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getEventoEnRegistrosRelatedByEvrgUsuActualizaJoinRegistroUsoMaquina($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventoEnRegistrosRelatedByEvrgUsuActualiza === null) {
			if ($this->isNew()) {
				$this->collEventoEnRegistrosRelatedByEvrgUsuActualiza = array();
			} else {

				$criteria->add(EventoEnRegistroPeer::EVRG_USU_ACTUALIZA, $this->usu_codigo);

				$this->collEventoEnRegistrosRelatedByEvrgUsuActualiza = EventoEnRegistroPeer::doSelectJoinRegistroUsoMaquina($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventoEnRegistroPeer::EVRG_USU_ACTUALIZA, $this->usu_codigo);

			if (!isset($this->lastEventoEnRegistroRelatedByEvrgUsuActualizaCriteria) || !$this->lastEventoEnRegistroRelatedByEvrgUsuActualizaCriteria->equals($criteria)) {
				$this->collEventoEnRegistrosRelatedByEvrgUsuActualiza = EventoEnRegistroPeer::doSelectJoinRegistroUsoMaquina($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventoEnRegistroRelatedByEvrgUsuActualizaCriteria = $criteria;

		return $this->collEventoEnRegistrosRelatedByEvrgUsuActualiza;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related EventoEnRegistrosRelatedByEvrgUsuActualiza from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getEventoEnRegistrosRelatedByEvrgUsuActualizaJoinEvento($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventoEnRegistrosRelatedByEvrgUsuActualiza === null) {
			if ($this->isNew()) {
				$this->collEventoEnRegistrosRelatedByEvrgUsuActualiza = array();
			} else {

				$criteria->add(EventoEnRegistroPeer::EVRG_USU_ACTUALIZA, $this->usu_codigo);

				$this->collEventoEnRegistrosRelatedByEvrgUsuActualiza = EventoEnRegistroPeer::doSelectJoinEvento($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventoEnRegistroPeer::EVRG_USU_ACTUALIZA, $this->usu_codigo);

			if (!isset($this->lastEventoEnRegistroRelatedByEvrgUsuActualizaCriteria) || !$this->lastEventoEnRegistroRelatedByEvrgUsuActualizaCriteria->equals($criteria)) {
				$this->collEventoEnRegistrosRelatedByEvrgUsuActualiza = EventoEnRegistroPeer::doSelectJoinEvento($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventoEnRegistroRelatedByEvrgUsuActualizaCriteria = $criteria;

		return $this->collEventoEnRegistrosRelatedByEvrgUsuActualiza;
	}

	/**
	 * Clears out the collEventoPorCategorias collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEventoPorCategorias()
	 */
	public function clearEventoPorCategorias()
	{
		$this->collEventoPorCategorias = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEventoPorCategorias collection (array).
	 *
	 * By default this just sets the collEventoPorCategorias collection to an empty array (like clearcollEventoPorCategorias());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEventoPorCategorias()
	{
		$this->collEventoPorCategorias = array();
	}

	/**
	 * Gets an array of EventoPorCategoria objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related EventoPorCategorias from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EventoPorCategoria[]
	 * @throws     PropelException
	 */
	public function getEventoPorCategorias($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventoPorCategorias === null) {
			if ($this->isNew()) {
			   $this->collEventoPorCategorias = array();
			} else {

				$criteria->add(EventoPorCategoriaPeer::EVCA_USU_CREA, $this->usu_codigo);

				EventoPorCategoriaPeer::addSelectColumns($criteria);
				$this->collEventoPorCategorias = EventoPorCategoriaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EventoPorCategoriaPeer::EVCA_USU_CREA, $this->usu_codigo);

				EventoPorCategoriaPeer::addSelectColumns($criteria);
				if (!isset($this->lastEventoPorCategoriaCriteria) || !$this->lastEventoPorCategoriaCriteria->equals($criteria)) {
					$this->collEventoPorCategorias = EventoPorCategoriaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEventoPorCategoriaCriteria = $criteria;
		return $this->collEventoPorCategorias;
	}

	/**
	 * Returns the number of related EventoPorCategoria objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EventoPorCategoria objects.
	 * @throws     PropelException
	 */
	public function countEventoPorCategorias(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEventoPorCategorias === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EventoPorCategoriaPeer::EVCA_USU_CREA, $this->usu_codigo);

				$count = EventoPorCategoriaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EventoPorCategoriaPeer::EVCA_USU_CREA, $this->usu_codigo);

				if (!isset($this->lastEventoPorCategoriaCriteria) || !$this->lastEventoPorCategoriaCriteria->equals($criteria)) {
					$count = EventoPorCategoriaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEventoPorCategorias);
				}
			} else {
				$count = count($this->collEventoPorCategorias);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EventoPorCategoria object to this object
	 * through the EventoPorCategoria foreign key attribute.
	 *
	 * @param      EventoPorCategoria $l EventoPorCategoria
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEventoPorCategoria(EventoPorCategoria $l)
	{
		if ($this->collEventoPorCategorias === null) {
			$this->initEventoPorCategorias();
		}
		if (!in_array($l, $this->collEventoPorCategorias, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEventoPorCategorias, $l);
			$l->setUsuario($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related EventoPorCategorias from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getEventoPorCategoriasJoinCategoriaEvento($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventoPorCategorias === null) {
			if ($this->isNew()) {
				$this->collEventoPorCategorias = array();
			} else {

				$criteria->add(EventoPorCategoriaPeer::EVCA_USU_CREA, $this->usu_codigo);

				$this->collEventoPorCategorias = EventoPorCategoriaPeer::doSelectJoinCategoriaEvento($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventoPorCategoriaPeer::EVCA_USU_CREA, $this->usu_codigo);

			if (!isset($this->lastEventoPorCategoriaCriteria) || !$this->lastEventoPorCategoriaCriteria->equals($criteria)) {
				$this->collEventoPorCategorias = EventoPorCategoriaPeer::doSelectJoinCategoriaEvento($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventoPorCategoriaCriteria = $criteria;

		return $this->collEventoPorCategorias;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related EventoPorCategorias from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getEventoPorCategoriasJoinEvento($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventoPorCategorias === null) {
			if ($this->isNew()) {
				$this->collEventoPorCategorias = array();
			} else {

				$criteria->add(EventoPorCategoriaPeer::EVCA_USU_CREA, $this->usu_codigo);

				$this->collEventoPorCategorias = EventoPorCategoriaPeer::doSelectJoinEvento($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventoPorCategoriaPeer::EVCA_USU_CREA, $this->usu_codigo);

			if (!isset($this->lastEventoPorCategoriaCriteria) || !$this->lastEventoPorCategoriaCriteria->equals($criteria)) {
				$this->collEventoPorCategorias = EventoPorCategoriaPeer::doSelectJoinEvento($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventoPorCategoriaCriteria = $criteria;

		return $this->collEventoPorCategorias;
	}

	/**
	 * Clears out the collIndicadorsRelatedByIndUsuCrea collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addIndicadorsRelatedByIndUsuCrea()
	 */
	public function clearIndicadorsRelatedByIndUsuCrea()
	{
		$this->collIndicadorsRelatedByIndUsuCrea = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collIndicadorsRelatedByIndUsuCrea collection (array).
	 *
	 * By default this just sets the collIndicadorsRelatedByIndUsuCrea collection to an empty array (like clearcollIndicadorsRelatedByIndUsuCrea());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initIndicadorsRelatedByIndUsuCrea()
	{
		$this->collIndicadorsRelatedByIndUsuCrea = array();
	}

	/**
	 * Gets an array of Indicador objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related IndicadorsRelatedByIndUsuCrea from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Indicador[]
	 * @throws     PropelException
	 */
	public function getIndicadorsRelatedByIndUsuCrea($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collIndicadorsRelatedByIndUsuCrea === null) {
			if ($this->isNew()) {
			   $this->collIndicadorsRelatedByIndUsuCrea = array();
			} else {

				$criteria->add(IndicadorPeer::IND_USU_CREA, $this->usu_codigo);

				IndicadorPeer::addSelectColumns($criteria);
				$this->collIndicadorsRelatedByIndUsuCrea = IndicadorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(IndicadorPeer::IND_USU_CREA, $this->usu_codigo);

				IndicadorPeer::addSelectColumns($criteria);
				if (!isset($this->lastIndicadorRelatedByIndUsuCreaCriteria) || !$this->lastIndicadorRelatedByIndUsuCreaCriteria->equals($criteria)) {
					$this->collIndicadorsRelatedByIndUsuCrea = IndicadorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastIndicadorRelatedByIndUsuCreaCriteria = $criteria;
		return $this->collIndicadorsRelatedByIndUsuCrea;
	}

	/**
	 * Returns the number of related Indicador objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Indicador objects.
	 * @throws     PropelException
	 */
	public function countIndicadorsRelatedByIndUsuCrea(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collIndicadorsRelatedByIndUsuCrea === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(IndicadorPeer::IND_USU_CREA, $this->usu_codigo);

				$count = IndicadorPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(IndicadorPeer::IND_USU_CREA, $this->usu_codigo);

				if (!isset($this->lastIndicadorRelatedByIndUsuCreaCriteria) || !$this->lastIndicadorRelatedByIndUsuCreaCriteria->equals($criteria)) {
					$count = IndicadorPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collIndicadorsRelatedByIndUsuCrea);
				}
			} else {
				$count = count($this->collIndicadorsRelatedByIndUsuCrea);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Indicador object to this object
	 * through the Indicador foreign key attribute.
	 *
	 * @param      Indicador $l Indicador
	 * @return     void
	 * @throws     PropelException
	 */
	public function addIndicadorRelatedByIndUsuCrea(Indicador $l)
	{
		if ($this->collIndicadorsRelatedByIndUsuCrea === null) {
			$this->initIndicadorsRelatedByIndUsuCrea();
		}
		if (!in_array($l, $this->collIndicadorsRelatedByIndUsuCrea, true)) { // only add it if the **same** object is not already associated
			array_push($this->collIndicadorsRelatedByIndUsuCrea, $l);
			$l->setUsuarioRelatedByIndUsuCrea($this);
		}
	}

	/**
	 * Clears out the collIndicadorsRelatedByIndUsuActualiza collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addIndicadorsRelatedByIndUsuActualiza()
	 */
	public function clearIndicadorsRelatedByIndUsuActualiza()
	{
		$this->collIndicadorsRelatedByIndUsuActualiza = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collIndicadorsRelatedByIndUsuActualiza collection (array).
	 *
	 * By default this just sets the collIndicadorsRelatedByIndUsuActualiza collection to an empty array (like clearcollIndicadorsRelatedByIndUsuActualiza());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initIndicadorsRelatedByIndUsuActualiza()
	{
		$this->collIndicadorsRelatedByIndUsuActualiza = array();
	}

	/**
	 * Gets an array of Indicador objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related IndicadorsRelatedByIndUsuActualiza from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Indicador[]
	 * @throws     PropelException
	 */
	public function getIndicadorsRelatedByIndUsuActualiza($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collIndicadorsRelatedByIndUsuActualiza === null) {
			if ($this->isNew()) {
			   $this->collIndicadorsRelatedByIndUsuActualiza = array();
			} else {

				$criteria->add(IndicadorPeer::IND_USU_ACTUALIZA, $this->usu_codigo);

				IndicadorPeer::addSelectColumns($criteria);
				$this->collIndicadorsRelatedByIndUsuActualiza = IndicadorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(IndicadorPeer::IND_USU_ACTUALIZA, $this->usu_codigo);

				IndicadorPeer::addSelectColumns($criteria);
				if (!isset($this->lastIndicadorRelatedByIndUsuActualizaCriteria) || !$this->lastIndicadorRelatedByIndUsuActualizaCriteria->equals($criteria)) {
					$this->collIndicadorsRelatedByIndUsuActualiza = IndicadorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastIndicadorRelatedByIndUsuActualizaCriteria = $criteria;
		return $this->collIndicadorsRelatedByIndUsuActualiza;
	}

	/**
	 * Returns the number of related Indicador objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Indicador objects.
	 * @throws     PropelException
	 */
	public function countIndicadorsRelatedByIndUsuActualiza(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collIndicadorsRelatedByIndUsuActualiza === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(IndicadorPeer::IND_USU_ACTUALIZA, $this->usu_codigo);

				$count = IndicadorPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(IndicadorPeer::IND_USU_ACTUALIZA, $this->usu_codigo);

				if (!isset($this->lastIndicadorRelatedByIndUsuActualizaCriteria) || !$this->lastIndicadorRelatedByIndUsuActualizaCriteria->equals($criteria)) {
					$count = IndicadorPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collIndicadorsRelatedByIndUsuActualiza);
				}
			} else {
				$count = count($this->collIndicadorsRelatedByIndUsuActualiza);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Indicador object to this object
	 * through the Indicador foreign key attribute.
	 *
	 * @param      Indicador $l Indicador
	 * @return     void
	 * @throws     PropelException
	 */
	public function addIndicadorRelatedByIndUsuActualiza(Indicador $l)
	{
		if ($this->collIndicadorsRelatedByIndUsuActualiza === null) {
			$this->initIndicadorsRelatedByIndUsuActualiza();
		}
		if (!in_array($l, $this->collIndicadorsRelatedByIndUsuActualiza, true)) { // only add it if the **same** object is not already associated
			array_push($this->collIndicadorsRelatedByIndUsuActualiza, $l);
			$l->setUsuarioRelatedByIndUsuActualiza($this);
		}
	}

	/**
	 * Clears out the collMaquinasRelatedByMaqUsuCrea collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMaquinasRelatedByMaqUsuCrea()
	 */
	public function clearMaquinasRelatedByMaqUsuCrea()
	{
		$this->collMaquinasRelatedByMaqUsuCrea = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMaquinasRelatedByMaqUsuCrea collection (array).
	 *
	 * By default this just sets the collMaquinasRelatedByMaqUsuCrea collection to an empty array (like clearcollMaquinasRelatedByMaqUsuCrea());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMaquinasRelatedByMaqUsuCrea()
	{
		$this->collMaquinasRelatedByMaqUsuCrea = array();
	}

	/**
	 * Gets an array of Maquina objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related MaquinasRelatedByMaqUsuCrea from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Maquina[]
	 * @throws     PropelException
	 */
	public function getMaquinasRelatedByMaqUsuCrea($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMaquinasRelatedByMaqUsuCrea === null) {
			if ($this->isNew()) {
			   $this->collMaquinasRelatedByMaqUsuCrea = array();
			} else {

				$criteria->add(MaquinaPeer::MAQ_USU_CREA, $this->usu_codigo);

				MaquinaPeer::addSelectColumns($criteria);
				$this->collMaquinasRelatedByMaqUsuCrea = MaquinaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MaquinaPeer::MAQ_USU_CREA, $this->usu_codigo);

				MaquinaPeer::addSelectColumns($criteria);
				if (!isset($this->lastMaquinaRelatedByMaqUsuCreaCriteria) || !$this->lastMaquinaRelatedByMaqUsuCreaCriteria->equals($criteria)) {
					$this->collMaquinasRelatedByMaqUsuCrea = MaquinaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMaquinaRelatedByMaqUsuCreaCriteria = $criteria;
		return $this->collMaquinasRelatedByMaqUsuCrea;
	}

	/**
	 * Returns the number of related Maquina objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Maquina objects.
	 * @throws     PropelException
	 */
	public function countMaquinasRelatedByMaqUsuCrea(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMaquinasRelatedByMaqUsuCrea === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MaquinaPeer::MAQ_USU_CREA, $this->usu_codigo);

				$count = MaquinaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MaquinaPeer::MAQ_USU_CREA, $this->usu_codigo);

				if (!isset($this->lastMaquinaRelatedByMaqUsuCreaCriteria) || !$this->lastMaquinaRelatedByMaqUsuCreaCriteria->equals($criteria)) {
					$count = MaquinaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collMaquinasRelatedByMaqUsuCrea);
				}
			} else {
				$count = count($this->collMaquinasRelatedByMaqUsuCrea);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Maquina object to this object
	 * through the Maquina foreign key attribute.
	 *
	 * @param      Maquina $l Maquina
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMaquinaRelatedByMaqUsuCrea(Maquina $l)
	{
		if ($this->collMaquinasRelatedByMaqUsuCrea === null) {
			$this->initMaquinasRelatedByMaqUsuCrea();
		}
		if (!in_array($l, $this->collMaquinasRelatedByMaqUsuCrea, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMaquinasRelatedByMaqUsuCrea, $l);
			$l->setUsuarioRelatedByMaqUsuCrea($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related MaquinasRelatedByMaqUsuCrea from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getMaquinasRelatedByMaqUsuCreaJoinEstado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMaquinasRelatedByMaqUsuCrea === null) {
			if ($this->isNew()) {
				$this->collMaquinasRelatedByMaqUsuCrea = array();
			} else {

				$criteria->add(MaquinaPeer::MAQ_USU_CREA, $this->usu_codigo);

				$this->collMaquinasRelatedByMaqUsuCrea = MaquinaPeer::doSelectJoinEstado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MaquinaPeer::MAQ_USU_CREA, $this->usu_codigo);

			if (!isset($this->lastMaquinaRelatedByMaqUsuCreaCriteria) || !$this->lastMaquinaRelatedByMaqUsuCreaCriteria->equals($criteria)) {
				$this->collMaquinasRelatedByMaqUsuCrea = MaquinaPeer::doSelectJoinEstado($criteria, $con, $join_behavior);
			}
		}
		$this->lastMaquinaRelatedByMaqUsuCreaCriteria = $criteria;

		return $this->collMaquinasRelatedByMaqUsuCrea;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related MaquinasRelatedByMaqUsuCrea from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getMaquinasRelatedByMaqUsuCreaJoinComputador($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMaquinasRelatedByMaqUsuCrea === null) {
			if ($this->isNew()) {
				$this->collMaquinasRelatedByMaqUsuCrea = array();
			} else {

				$criteria->add(MaquinaPeer::MAQ_USU_CREA, $this->usu_codigo);

				$this->collMaquinasRelatedByMaqUsuCrea = MaquinaPeer::doSelectJoinComputador($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MaquinaPeer::MAQ_USU_CREA, $this->usu_codigo);

			if (!isset($this->lastMaquinaRelatedByMaqUsuCreaCriteria) || !$this->lastMaquinaRelatedByMaqUsuCreaCriteria->equals($criteria)) {
				$this->collMaquinasRelatedByMaqUsuCrea = MaquinaPeer::doSelectJoinComputador($criteria, $con, $join_behavior);
			}
		}
		$this->lastMaquinaRelatedByMaqUsuCreaCriteria = $criteria;

		return $this->collMaquinasRelatedByMaqUsuCrea;
	}

	/**
	 * Clears out the collMaquinasRelatedByMaqUsuActualiza collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMaquinasRelatedByMaqUsuActualiza()
	 */
	public function clearMaquinasRelatedByMaqUsuActualiza()
	{
		$this->collMaquinasRelatedByMaqUsuActualiza = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMaquinasRelatedByMaqUsuActualiza collection (array).
	 *
	 * By default this just sets the collMaquinasRelatedByMaqUsuActualiza collection to an empty array (like clearcollMaquinasRelatedByMaqUsuActualiza());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMaquinasRelatedByMaqUsuActualiza()
	{
		$this->collMaquinasRelatedByMaqUsuActualiza = array();
	}

	/**
	 * Gets an array of Maquina objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related MaquinasRelatedByMaqUsuActualiza from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Maquina[]
	 * @throws     PropelException
	 */
	public function getMaquinasRelatedByMaqUsuActualiza($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMaquinasRelatedByMaqUsuActualiza === null) {
			if ($this->isNew()) {
			   $this->collMaquinasRelatedByMaqUsuActualiza = array();
			} else {

				$criteria->add(MaquinaPeer::MAQ_USU_ACTUALIZA, $this->usu_codigo);

				MaquinaPeer::addSelectColumns($criteria);
				$this->collMaquinasRelatedByMaqUsuActualiza = MaquinaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MaquinaPeer::MAQ_USU_ACTUALIZA, $this->usu_codigo);

				MaquinaPeer::addSelectColumns($criteria);
				if (!isset($this->lastMaquinaRelatedByMaqUsuActualizaCriteria) || !$this->lastMaquinaRelatedByMaqUsuActualizaCriteria->equals($criteria)) {
					$this->collMaquinasRelatedByMaqUsuActualiza = MaquinaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMaquinaRelatedByMaqUsuActualizaCriteria = $criteria;
		return $this->collMaquinasRelatedByMaqUsuActualiza;
	}

	/**
	 * Returns the number of related Maquina objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Maquina objects.
	 * @throws     PropelException
	 */
	public function countMaquinasRelatedByMaqUsuActualiza(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMaquinasRelatedByMaqUsuActualiza === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MaquinaPeer::MAQ_USU_ACTUALIZA, $this->usu_codigo);

				$count = MaquinaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MaquinaPeer::MAQ_USU_ACTUALIZA, $this->usu_codigo);

				if (!isset($this->lastMaquinaRelatedByMaqUsuActualizaCriteria) || !$this->lastMaquinaRelatedByMaqUsuActualizaCriteria->equals($criteria)) {
					$count = MaquinaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collMaquinasRelatedByMaqUsuActualiza);
				}
			} else {
				$count = count($this->collMaquinasRelatedByMaqUsuActualiza);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Maquina object to this object
	 * through the Maquina foreign key attribute.
	 *
	 * @param      Maquina $l Maquina
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMaquinaRelatedByMaqUsuActualiza(Maquina $l)
	{
		if ($this->collMaquinasRelatedByMaqUsuActualiza === null) {
			$this->initMaquinasRelatedByMaqUsuActualiza();
		}
		if (!in_array($l, $this->collMaquinasRelatedByMaqUsuActualiza, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMaquinasRelatedByMaqUsuActualiza, $l);
			$l->setUsuarioRelatedByMaqUsuActualiza($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related MaquinasRelatedByMaqUsuActualiza from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getMaquinasRelatedByMaqUsuActualizaJoinEstado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMaquinasRelatedByMaqUsuActualiza === null) {
			if ($this->isNew()) {
				$this->collMaquinasRelatedByMaqUsuActualiza = array();
			} else {

				$criteria->add(MaquinaPeer::MAQ_USU_ACTUALIZA, $this->usu_codigo);

				$this->collMaquinasRelatedByMaqUsuActualiza = MaquinaPeer::doSelectJoinEstado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MaquinaPeer::MAQ_USU_ACTUALIZA, $this->usu_codigo);

			if (!isset($this->lastMaquinaRelatedByMaqUsuActualizaCriteria) || !$this->lastMaquinaRelatedByMaqUsuActualizaCriteria->equals($criteria)) {
				$this->collMaquinasRelatedByMaqUsuActualiza = MaquinaPeer::doSelectJoinEstado($criteria, $con, $join_behavior);
			}
		}
		$this->lastMaquinaRelatedByMaqUsuActualizaCriteria = $criteria;

		return $this->collMaquinasRelatedByMaqUsuActualiza;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related MaquinasRelatedByMaqUsuActualiza from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getMaquinasRelatedByMaqUsuActualizaJoinComputador($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMaquinasRelatedByMaqUsuActualiza === null) {
			if ($this->isNew()) {
				$this->collMaquinasRelatedByMaqUsuActualiza = array();
			} else {

				$criteria->add(MaquinaPeer::MAQ_USU_ACTUALIZA, $this->usu_codigo);

				$this->collMaquinasRelatedByMaqUsuActualiza = MaquinaPeer::doSelectJoinComputador($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MaquinaPeer::MAQ_USU_ACTUALIZA, $this->usu_codigo);

			if (!isset($this->lastMaquinaRelatedByMaqUsuActualizaCriteria) || !$this->lastMaquinaRelatedByMaqUsuActualizaCriteria->equals($criteria)) {
				$this->collMaquinasRelatedByMaqUsuActualiza = MaquinaPeer::doSelectJoinComputador($criteria, $con, $join_behavior);
			}
		}
		$this->lastMaquinaRelatedByMaqUsuActualizaCriteria = $criteria;

		return $this->collMaquinasRelatedByMaqUsuActualiza;
	}

	/**
	 * Clears out the collMetaAnualXIndicadorsRelatedByMeaUsuCrea collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMetaAnualXIndicadorsRelatedByMeaUsuCrea()
	 */
	public function clearMetaAnualXIndicadorsRelatedByMeaUsuCrea()
	{
		$this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMetaAnualXIndicadorsRelatedByMeaUsuCrea collection (array).
	 *
	 * By default this just sets the collMetaAnualXIndicadorsRelatedByMeaUsuCrea collection to an empty array (like clearcollMetaAnualXIndicadorsRelatedByMeaUsuCrea());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMetaAnualXIndicadorsRelatedByMeaUsuCrea()
	{
		$this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea = array();
	}

	/**
	 * Gets an array of MetaAnualXIndicador objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related MetaAnualXIndicadorsRelatedByMeaUsuCrea from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MetaAnualXIndicador[]
	 * @throws     PropelException
	 */
	public function getMetaAnualXIndicadorsRelatedByMeaUsuCrea($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea === null) {
			if ($this->isNew()) {
			   $this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea = array();
			} else {

				$criteria->add(MetaAnualXIndicadorPeer::MEA_USU_CREA, $this->usu_codigo);

				MetaAnualXIndicadorPeer::addSelectColumns($criteria);
				$this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea = MetaAnualXIndicadorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MetaAnualXIndicadorPeer::MEA_USU_CREA, $this->usu_codigo);

				MetaAnualXIndicadorPeer::addSelectColumns($criteria);
				if (!isset($this->lastMetaAnualXIndicadorRelatedByMeaUsuCreaCriteria) || !$this->lastMetaAnualXIndicadorRelatedByMeaUsuCreaCriteria->equals($criteria)) {
					$this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea = MetaAnualXIndicadorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMetaAnualXIndicadorRelatedByMeaUsuCreaCriteria = $criteria;
		return $this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea;
	}

	/**
	 * Returns the number of related MetaAnualXIndicador objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MetaAnualXIndicador objects.
	 * @throws     PropelException
	 */
	public function countMetaAnualXIndicadorsRelatedByMeaUsuCrea(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MetaAnualXIndicadorPeer::MEA_USU_CREA, $this->usu_codigo);

				$count = MetaAnualXIndicadorPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MetaAnualXIndicadorPeer::MEA_USU_CREA, $this->usu_codigo);

				if (!isset($this->lastMetaAnualXIndicadorRelatedByMeaUsuCreaCriteria) || !$this->lastMetaAnualXIndicadorRelatedByMeaUsuCreaCriteria->equals($criteria)) {
					$count = MetaAnualXIndicadorPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea);
				}
			} else {
				$count = count($this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MetaAnualXIndicador object to this object
	 * through the MetaAnualXIndicador foreign key attribute.
	 *
	 * @param      MetaAnualXIndicador $l MetaAnualXIndicador
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMetaAnualXIndicadorRelatedByMeaUsuCrea(MetaAnualXIndicador $l)
	{
		if ($this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea === null) {
			$this->initMetaAnualXIndicadorsRelatedByMeaUsuCrea();
		}
		if (!in_array($l, $this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea, $l);
			$l->setUsuarioRelatedByMeaUsuCrea($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related MetaAnualXIndicadorsRelatedByMeaUsuCrea from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getMetaAnualXIndicadorsRelatedByMeaUsuCreaJoinIndicador($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea === null) {
			if ($this->isNew()) {
				$this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea = array();
			} else {

				$criteria->add(MetaAnualXIndicadorPeer::MEA_USU_CREA, $this->usu_codigo);

				$this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea = MetaAnualXIndicadorPeer::doSelectJoinIndicador($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MetaAnualXIndicadorPeer::MEA_USU_CREA, $this->usu_codigo);

			if (!isset($this->lastMetaAnualXIndicadorRelatedByMeaUsuCreaCriteria) || !$this->lastMetaAnualXIndicadorRelatedByMeaUsuCreaCriteria->equals($criteria)) {
				$this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea = MetaAnualXIndicadorPeer::doSelectJoinIndicador($criteria, $con, $join_behavior);
			}
		}
		$this->lastMetaAnualXIndicadorRelatedByMeaUsuCreaCriteria = $criteria;

		return $this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related MetaAnualXIndicadorsRelatedByMeaUsuCrea from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getMetaAnualXIndicadorsRelatedByMeaUsuCreaJoinEmpresa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea === null) {
			if ($this->isNew()) {
				$this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea = array();
			} else {

				$criteria->add(MetaAnualXIndicadorPeer::MEA_USU_CREA, $this->usu_codigo);

				$this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea = MetaAnualXIndicadorPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MetaAnualXIndicadorPeer::MEA_USU_CREA, $this->usu_codigo);

			if (!isset($this->lastMetaAnualXIndicadorRelatedByMeaUsuCreaCriteria) || !$this->lastMetaAnualXIndicadorRelatedByMeaUsuCreaCriteria->equals($criteria)) {
				$this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea = MetaAnualXIndicadorPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		}
		$this->lastMetaAnualXIndicadorRelatedByMeaUsuCreaCriteria = $criteria;

		return $this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea;
	}

	/**
	 * Clears out the collMetaAnualXIndicadorsRelatedByMeaUsuActualiza collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMetaAnualXIndicadorsRelatedByMeaUsuActualiza()
	 */
	public function clearMetaAnualXIndicadorsRelatedByMeaUsuActualiza()
	{
		$this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMetaAnualXIndicadorsRelatedByMeaUsuActualiza collection (array).
	 *
	 * By default this just sets the collMetaAnualXIndicadorsRelatedByMeaUsuActualiza collection to an empty array (like clearcollMetaAnualXIndicadorsRelatedByMeaUsuActualiza());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMetaAnualXIndicadorsRelatedByMeaUsuActualiza()
	{
		$this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza = array();
	}

	/**
	 * Gets an array of MetaAnualXIndicador objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related MetaAnualXIndicadorsRelatedByMeaUsuActualiza from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MetaAnualXIndicador[]
	 * @throws     PropelException
	 */
	public function getMetaAnualXIndicadorsRelatedByMeaUsuActualiza($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza === null) {
			if ($this->isNew()) {
			   $this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza = array();
			} else {

				$criteria->add(MetaAnualXIndicadorPeer::MEA_USU_ACTUALIZA, $this->usu_codigo);

				MetaAnualXIndicadorPeer::addSelectColumns($criteria);
				$this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza = MetaAnualXIndicadorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MetaAnualXIndicadorPeer::MEA_USU_ACTUALIZA, $this->usu_codigo);

				MetaAnualXIndicadorPeer::addSelectColumns($criteria);
				if (!isset($this->lastMetaAnualXIndicadorRelatedByMeaUsuActualizaCriteria) || !$this->lastMetaAnualXIndicadorRelatedByMeaUsuActualizaCriteria->equals($criteria)) {
					$this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza = MetaAnualXIndicadorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMetaAnualXIndicadorRelatedByMeaUsuActualizaCriteria = $criteria;
		return $this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza;
	}

	/**
	 * Returns the number of related MetaAnualXIndicador objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MetaAnualXIndicador objects.
	 * @throws     PropelException
	 */
	public function countMetaAnualXIndicadorsRelatedByMeaUsuActualiza(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MetaAnualXIndicadorPeer::MEA_USU_ACTUALIZA, $this->usu_codigo);

				$count = MetaAnualXIndicadorPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MetaAnualXIndicadorPeer::MEA_USU_ACTUALIZA, $this->usu_codigo);

				if (!isset($this->lastMetaAnualXIndicadorRelatedByMeaUsuActualizaCriteria) || !$this->lastMetaAnualXIndicadorRelatedByMeaUsuActualizaCriteria->equals($criteria)) {
					$count = MetaAnualXIndicadorPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza);
				}
			} else {
				$count = count($this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MetaAnualXIndicador object to this object
	 * through the MetaAnualXIndicador foreign key attribute.
	 *
	 * @param      MetaAnualXIndicador $l MetaAnualXIndicador
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMetaAnualXIndicadorRelatedByMeaUsuActualiza(MetaAnualXIndicador $l)
	{
		if ($this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza === null) {
			$this->initMetaAnualXIndicadorsRelatedByMeaUsuActualiza();
		}
		if (!in_array($l, $this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza, $l);
			$l->setUsuarioRelatedByMeaUsuActualiza($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related MetaAnualXIndicadorsRelatedByMeaUsuActualiza from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getMetaAnualXIndicadorsRelatedByMeaUsuActualizaJoinIndicador($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza === null) {
			if ($this->isNew()) {
				$this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza = array();
			} else {

				$criteria->add(MetaAnualXIndicadorPeer::MEA_USU_ACTUALIZA, $this->usu_codigo);

				$this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza = MetaAnualXIndicadorPeer::doSelectJoinIndicador($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MetaAnualXIndicadorPeer::MEA_USU_ACTUALIZA, $this->usu_codigo);

			if (!isset($this->lastMetaAnualXIndicadorRelatedByMeaUsuActualizaCriteria) || !$this->lastMetaAnualXIndicadorRelatedByMeaUsuActualizaCriteria->equals($criteria)) {
				$this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza = MetaAnualXIndicadorPeer::doSelectJoinIndicador($criteria, $con, $join_behavior);
			}
		}
		$this->lastMetaAnualXIndicadorRelatedByMeaUsuActualizaCriteria = $criteria;

		return $this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related MetaAnualXIndicadorsRelatedByMeaUsuActualiza from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getMetaAnualXIndicadorsRelatedByMeaUsuActualizaJoinEmpresa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza === null) {
			if ($this->isNew()) {
				$this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza = array();
			} else {

				$criteria->add(MetaAnualXIndicadorPeer::MEA_USU_ACTUALIZA, $this->usu_codigo);

				$this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza = MetaAnualXIndicadorPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MetaAnualXIndicadorPeer::MEA_USU_ACTUALIZA, $this->usu_codigo);

			if (!isset($this->lastMetaAnualXIndicadorRelatedByMeaUsuActualizaCriteria) || !$this->lastMetaAnualXIndicadorRelatedByMeaUsuActualizaCriteria->equals($criteria)) {
				$this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza = MetaAnualXIndicadorPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		}
		$this->lastMetaAnualXIndicadorRelatedByMeaUsuActualizaCriteria = $criteria;

		return $this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza;
	}

	/**
	 * Clears out the collMetodosRelatedByMetUsuCrea collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMetodosRelatedByMetUsuCrea()
	 */
	public function clearMetodosRelatedByMetUsuCrea()
	{
		$this->collMetodosRelatedByMetUsuCrea = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMetodosRelatedByMetUsuCrea collection (array).
	 *
	 * By default this just sets the collMetodosRelatedByMetUsuCrea collection to an empty array (like clearcollMetodosRelatedByMetUsuCrea());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMetodosRelatedByMetUsuCrea()
	{
		$this->collMetodosRelatedByMetUsuCrea = array();
	}

	/**
	 * Gets an array of Metodo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related MetodosRelatedByMetUsuCrea from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Metodo[]
	 * @throws     PropelException
	 */
	public function getMetodosRelatedByMetUsuCrea($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMetodosRelatedByMetUsuCrea === null) {
			if ($this->isNew()) {
			   $this->collMetodosRelatedByMetUsuCrea = array();
			} else {

				$criteria->add(MetodoPeer::MET_USU_CREA, $this->usu_codigo);

				MetodoPeer::addSelectColumns($criteria);
				$this->collMetodosRelatedByMetUsuCrea = MetodoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MetodoPeer::MET_USU_CREA, $this->usu_codigo);

				MetodoPeer::addSelectColumns($criteria);
				if (!isset($this->lastMetodoRelatedByMetUsuCreaCriteria) || !$this->lastMetodoRelatedByMetUsuCreaCriteria->equals($criteria)) {
					$this->collMetodosRelatedByMetUsuCrea = MetodoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMetodoRelatedByMetUsuCreaCriteria = $criteria;
		return $this->collMetodosRelatedByMetUsuCrea;
	}

	/**
	 * Returns the number of related Metodo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Metodo objects.
	 * @throws     PropelException
	 */
	public function countMetodosRelatedByMetUsuCrea(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMetodosRelatedByMetUsuCrea === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MetodoPeer::MET_USU_CREA, $this->usu_codigo);

				$count = MetodoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MetodoPeer::MET_USU_CREA, $this->usu_codigo);

				if (!isset($this->lastMetodoRelatedByMetUsuCreaCriteria) || !$this->lastMetodoRelatedByMetUsuCreaCriteria->equals($criteria)) {
					$count = MetodoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collMetodosRelatedByMetUsuCrea);
				}
			} else {
				$count = count($this->collMetodosRelatedByMetUsuCrea);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Metodo object to this object
	 * through the Metodo foreign key attribute.
	 *
	 * @param      Metodo $l Metodo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMetodoRelatedByMetUsuCrea(Metodo $l)
	{
		if ($this->collMetodosRelatedByMetUsuCrea === null) {
			$this->initMetodosRelatedByMetUsuCrea();
		}
		if (!in_array($l, $this->collMetodosRelatedByMetUsuCrea, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMetodosRelatedByMetUsuCrea, $l);
			$l->setUsuarioRelatedByMetUsuCrea($this);
		}
	}

	/**
	 * Clears out the collMetodosRelatedByMetUsuActualiza collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMetodosRelatedByMetUsuActualiza()
	 */
	public function clearMetodosRelatedByMetUsuActualiza()
	{
		$this->collMetodosRelatedByMetUsuActualiza = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMetodosRelatedByMetUsuActualiza collection (array).
	 *
	 * By default this just sets the collMetodosRelatedByMetUsuActualiza collection to an empty array (like clearcollMetodosRelatedByMetUsuActualiza());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMetodosRelatedByMetUsuActualiza()
	{
		$this->collMetodosRelatedByMetUsuActualiza = array();
	}

	/**
	 * Gets an array of Metodo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related MetodosRelatedByMetUsuActualiza from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Metodo[]
	 * @throws     PropelException
	 */
	public function getMetodosRelatedByMetUsuActualiza($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMetodosRelatedByMetUsuActualiza === null) {
			if ($this->isNew()) {
			   $this->collMetodosRelatedByMetUsuActualiza = array();
			} else {

				$criteria->add(MetodoPeer::MET_USU_ACTUALIZA, $this->usu_codigo);

				MetodoPeer::addSelectColumns($criteria);
				$this->collMetodosRelatedByMetUsuActualiza = MetodoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MetodoPeer::MET_USU_ACTUALIZA, $this->usu_codigo);

				MetodoPeer::addSelectColumns($criteria);
				if (!isset($this->lastMetodoRelatedByMetUsuActualizaCriteria) || !$this->lastMetodoRelatedByMetUsuActualizaCriteria->equals($criteria)) {
					$this->collMetodosRelatedByMetUsuActualiza = MetodoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMetodoRelatedByMetUsuActualizaCriteria = $criteria;
		return $this->collMetodosRelatedByMetUsuActualiza;
	}

	/**
	 * Returns the number of related Metodo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Metodo objects.
	 * @throws     PropelException
	 */
	public function countMetodosRelatedByMetUsuActualiza(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMetodosRelatedByMetUsuActualiza === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MetodoPeer::MET_USU_ACTUALIZA, $this->usu_codigo);

				$count = MetodoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MetodoPeer::MET_USU_ACTUALIZA, $this->usu_codigo);

				if (!isset($this->lastMetodoRelatedByMetUsuActualizaCriteria) || !$this->lastMetodoRelatedByMetUsuActualizaCriteria->equals($criteria)) {
					$count = MetodoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collMetodosRelatedByMetUsuActualiza);
				}
			} else {
				$count = count($this->collMetodosRelatedByMetUsuActualiza);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Metodo object to this object
	 * through the Metodo foreign key attribute.
	 *
	 * @param      Metodo $l Metodo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMetodoRelatedByMetUsuActualiza(Metodo $l)
	{
		if ($this->collMetodosRelatedByMetUsuActualiza === null) {
			$this->initMetodosRelatedByMetUsuActualiza();
		}
		if (!in_array($l, $this->collMetodosRelatedByMetUsuActualiza, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMetodosRelatedByMetUsuActualiza, $l);
			$l->setUsuarioRelatedByMetUsuActualiza($this);
		}
	}

	/**
	 * Clears out the collRegistroModificacions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRegistroModificacions()
	 */
	public function clearRegistroModificacions()
	{
		$this->collRegistroModificacions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRegistroModificacions collection (array).
	 *
	 * By default this just sets the collRegistroModificacions collection to an empty array (like clearcollRegistroModificacions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRegistroModificacions()
	{
		$this->collRegistroModificacions = array();
	}

	/**
	 * Gets an array of RegistroModificacion objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related RegistroModificacions from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RegistroModificacion[]
	 * @throws     PropelException
	 */
	public function getRegistroModificacions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRegistroModificacions === null) {
			if ($this->isNew()) {
			   $this->collRegistroModificacions = array();
			} else {

				$criteria->add(RegistroModificacionPeer::REM_USU_CODIGO, $this->usu_codigo);

				RegistroModificacionPeer::addSelectColumns($criteria);
				$this->collRegistroModificacions = RegistroModificacionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RegistroModificacionPeer::REM_USU_CODIGO, $this->usu_codigo);

				RegistroModificacionPeer::addSelectColumns($criteria);
				if (!isset($this->lastRegistroModificacionCriteria) || !$this->lastRegistroModificacionCriteria->equals($criteria)) {
					$this->collRegistroModificacions = RegistroModificacionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRegistroModificacionCriteria = $criteria;
		return $this->collRegistroModificacions;
	}

	/**
	 * Returns the number of related RegistroModificacion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RegistroModificacion objects.
	 * @throws     PropelException
	 */
	public function countRegistroModificacions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRegistroModificacions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RegistroModificacionPeer::REM_USU_CODIGO, $this->usu_codigo);

				$count = RegistroModificacionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RegistroModificacionPeer::REM_USU_CODIGO, $this->usu_codigo);

				if (!isset($this->lastRegistroModificacionCriteria) || !$this->lastRegistroModificacionCriteria->equals($criteria)) {
					$count = RegistroModificacionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collRegistroModificacions);
				}
			} else {
				$count = count($this->collRegistroModificacions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RegistroModificacion object to this object
	 * through the RegistroModificacion foreign key attribute.
	 *
	 * @param      RegistroModificacion $l RegistroModificacion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRegistroModificacion(RegistroModificacion $l)
	{
		if ($this->collRegistroModificacions === null) {
			$this->initRegistroModificacions();
		}
		if (!in_array($l, $this->collRegistroModificacions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRegistroModificacions, $l);
			$l->setUsuario($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related RegistroModificacions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getRegistroModificacionsJoinRegistroUsoMaquina($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRegistroModificacions === null) {
			if ($this->isNew()) {
				$this->collRegistroModificacions = array();
			} else {

				$criteria->add(RegistroModificacionPeer::REM_USU_CODIGO, $this->usu_codigo);

				$this->collRegistroModificacions = RegistroModificacionPeer::doSelectJoinRegistroUsoMaquina($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RegistroModificacionPeer::REM_USU_CODIGO, $this->usu_codigo);

			if (!isset($this->lastRegistroModificacionCriteria) || !$this->lastRegistroModificacionCriteria->equals($criteria)) {
				$this->collRegistroModificacions = RegistroModificacionPeer::doSelectJoinRegistroUsoMaquina($criteria, $con, $join_behavior);
			}
		}
		$this->lastRegistroModificacionCriteria = $criteria;

		return $this->collRegistroModificacions;
	}

	/**
	 * Clears out the collRegistroUsoMaquinasRelatedByRumUsuCodigo collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRegistroUsoMaquinasRelatedByRumUsuCodigo()
	 */
	public function clearRegistroUsoMaquinasRelatedByRumUsuCodigo()
	{
		$this->collRegistroUsoMaquinasRelatedByRumUsuCodigo = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRegistroUsoMaquinasRelatedByRumUsuCodigo collection (array).
	 *
	 * By default this just sets the collRegistroUsoMaquinasRelatedByRumUsuCodigo collection to an empty array (like clearcollRegistroUsoMaquinasRelatedByRumUsuCodigo());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRegistroUsoMaquinasRelatedByRumUsuCodigo()
	{
		$this->collRegistroUsoMaquinasRelatedByRumUsuCodigo = array();
	}

	/**
	 * Gets an array of RegistroUsoMaquina objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related RegistroUsoMaquinasRelatedByRumUsuCodigo from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RegistroUsoMaquina[]
	 * @throws     PropelException
	 */
	public function getRegistroUsoMaquinasRelatedByRumUsuCodigo($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigo === null) {
			if ($this->isNew()) {
			   $this->collRegistroUsoMaquinasRelatedByRumUsuCodigo = array();
			} else {

				$criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO, $this->usu_codigo);

				RegistroUsoMaquinaPeer::addSelectColumns($criteria);
				$this->collRegistroUsoMaquinasRelatedByRumUsuCodigo = RegistroUsoMaquinaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO, $this->usu_codigo);

				RegistroUsoMaquinaPeer::addSelectColumns($criteria);
				if (!isset($this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoCriteria) || !$this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoCriteria->equals($criteria)) {
					$this->collRegistroUsoMaquinasRelatedByRumUsuCodigo = RegistroUsoMaquinaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoCriteria = $criteria;
		return $this->collRegistroUsoMaquinasRelatedByRumUsuCodigo;
	}

	/**
	 * Returns the number of related RegistroUsoMaquina objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RegistroUsoMaquina objects.
	 * @throws     PropelException
	 */
	public function countRegistroUsoMaquinasRelatedByRumUsuCodigo(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigo === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO, $this->usu_codigo);

				$count = RegistroUsoMaquinaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO, $this->usu_codigo);

				if (!isset($this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoCriteria) || !$this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoCriteria->equals($criteria)) {
					$count = RegistroUsoMaquinaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collRegistroUsoMaquinasRelatedByRumUsuCodigo);
				}
			} else {
				$count = count($this->collRegistroUsoMaquinasRelatedByRumUsuCodigo);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RegistroUsoMaquina object to this object
	 * through the RegistroUsoMaquina foreign key attribute.
	 *
	 * @param      RegistroUsoMaquina $l RegistroUsoMaquina
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRegistroUsoMaquinaRelatedByRumUsuCodigo(RegistroUsoMaquina $l)
	{
		if ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigo === null) {
			$this->initRegistroUsoMaquinasRelatedByRumUsuCodigo();
		}
		if (!in_array($l, $this->collRegistroUsoMaquinasRelatedByRumUsuCodigo, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRegistroUsoMaquinasRelatedByRumUsuCodigo, $l);
			$l->setUsuarioRelatedByRumUsuCodigo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related RegistroUsoMaquinasRelatedByRumUsuCodigo from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getRegistroUsoMaquinasRelatedByRumUsuCodigoJoinMaquina($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigo === null) {
			if ($this->isNew()) {
				$this->collRegistroUsoMaquinasRelatedByRumUsuCodigo = array();
			} else {

				$criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO, $this->usu_codigo);

				$this->collRegistroUsoMaquinasRelatedByRumUsuCodigo = RegistroUsoMaquinaPeer::doSelectJoinMaquina($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO, $this->usu_codigo);

			if (!isset($this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoCriteria) || !$this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoCriteria->equals($criteria)) {
				$this->collRegistroUsoMaquinasRelatedByRumUsuCodigo = RegistroUsoMaquinaPeer::doSelectJoinMaquina($criteria, $con, $join_behavior);
			}
		}
		$this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoCriteria = $criteria;

		return $this->collRegistroUsoMaquinasRelatedByRumUsuCodigo;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related RegistroUsoMaquinasRelatedByRumUsuCodigo from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getRegistroUsoMaquinasRelatedByRumUsuCodigoJoinMetodo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigo === null) {
			if ($this->isNew()) {
				$this->collRegistroUsoMaquinasRelatedByRumUsuCodigo = array();
			} else {

				$criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO, $this->usu_codigo);

				$this->collRegistroUsoMaquinasRelatedByRumUsuCodigo = RegistroUsoMaquinaPeer::doSelectJoinMetodo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO, $this->usu_codigo);

			if (!isset($this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoCriteria) || !$this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoCriteria->equals($criteria)) {
				$this->collRegistroUsoMaquinasRelatedByRumUsuCodigo = RegistroUsoMaquinaPeer::doSelectJoinMetodo($criteria, $con, $join_behavior);
			}
		}
		$this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoCriteria = $criteria;

		return $this->collRegistroUsoMaquinasRelatedByRumUsuCodigo;
	}

	/**
	 * Clears out the collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRegistroUsoMaquinasRelatedByRumUsuCodigoElimino()
	 */
	public function clearRegistroUsoMaquinasRelatedByRumUsuCodigoElimino()
	{
		$this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino collection (array).
	 *
	 * By default this just sets the collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino collection to an empty array (like clearcollRegistroUsoMaquinasRelatedByRumUsuCodigoElimino());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRegistroUsoMaquinasRelatedByRumUsuCodigoElimino()
	{
		$this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino = array();
	}

	/**
	 * Gets an array of RegistroUsoMaquina objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related RegistroUsoMaquinasRelatedByRumUsuCodigoElimino from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RegistroUsoMaquina[]
	 * @throws     PropelException
	 */
	public function getRegistroUsoMaquinasRelatedByRumUsuCodigoElimino($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino === null) {
			if ($this->isNew()) {
			   $this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino = array();
			} else {

				$criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO_ELIMINO, $this->usu_codigo);

				RegistroUsoMaquinaPeer::addSelectColumns($criteria);
				$this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino = RegistroUsoMaquinaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO_ELIMINO, $this->usu_codigo);

				RegistroUsoMaquinaPeer::addSelectColumns($criteria);
				if (!isset($this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoEliminoCriteria) || !$this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoEliminoCriteria->equals($criteria)) {
					$this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino = RegistroUsoMaquinaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoEliminoCriteria = $criteria;
		return $this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino;
	}

	/**
	 * Returns the number of related RegistroUsoMaquina objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RegistroUsoMaquina objects.
	 * @throws     PropelException
	 */
	public function countRegistroUsoMaquinasRelatedByRumUsuCodigoElimino(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO_ELIMINO, $this->usu_codigo);

				$count = RegistroUsoMaquinaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO_ELIMINO, $this->usu_codigo);

				if (!isset($this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoEliminoCriteria) || !$this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoEliminoCriteria->equals($criteria)) {
					$count = RegistroUsoMaquinaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino);
				}
			} else {
				$count = count($this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RegistroUsoMaquina object to this object
	 * through the RegistroUsoMaquina foreign key attribute.
	 *
	 * @param      RegistroUsoMaquina $l RegistroUsoMaquina
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRegistroUsoMaquinaRelatedByRumUsuCodigoElimino(RegistroUsoMaquina $l)
	{
		if ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino === null) {
			$this->initRegistroUsoMaquinasRelatedByRumUsuCodigoElimino();
		}
		if (!in_array($l, $this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino, $l);
			$l->setUsuarioRelatedByRumUsuCodigoElimino($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related RegistroUsoMaquinasRelatedByRumUsuCodigoElimino from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getRegistroUsoMaquinasRelatedByRumUsuCodigoEliminoJoinMaquina($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino === null) {
			if ($this->isNew()) {
				$this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino = array();
			} else {

				$criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO_ELIMINO, $this->usu_codigo);

				$this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino = RegistroUsoMaquinaPeer::doSelectJoinMaquina($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO_ELIMINO, $this->usu_codigo);

			if (!isset($this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoEliminoCriteria) || !$this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoEliminoCriteria->equals($criteria)) {
				$this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino = RegistroUsoMaquinaPeer::doSelectJoinMaquina($criteria, $con, $join_behavior);
			}
		}
		$this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoEliminoCriteria = $criteria;

		return $this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related RegistroUsoMaquinasRelatedByRumUsuCodigoElimino from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getRegistroUsoMaquinasRelatedByRumUsuCodigoEliminoJoinMetodo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino === null) {
			if ($this->isNew()) {
				$this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino = array();
			} else {

				$criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO_ELIMINO, $this->usu_codigo);

				$this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino = RegistroUsoMaquinaPeer::doSelectJoinMetodo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RegistroUsoMaquinaPeer::RUM_USU_CODIGO_ELIMINO, $this->usu_codigo);

			if (!isset($this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoEliminoCriteria) || !$this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoEliminoCriteria->equals($criteria)) {
				$this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino = RegistroUsoMaquinaPeer::doSelectJoinMetodo($criteria, $con, $join_behavior);
			}
		}
		$this->lastRegistroUsoMaquinaRelatedByRumUsuCodigoEliminoCriteria = $criteria;

		return $this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino;
	}

	/**
	 * Clears out the collTipoIdentificacionsRelatedByTidUsuCrea collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTipoIdentificacionsRelatedByTidUsuCrea()
	 */
	public function clearTipoIdentificacionsRelatedByTidUsuCrea()
	{
		$this->collTipoIdentificacionsRelatedByTidUsuCrea = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTipoIdentificacionsRelatedByTidUsuCrea collection (array).
	 *
	 * By default this just sets the collTipoIdentificacionsRelatedByTidUsuCrea collection to an empty array (like clearcollTipoIdentificacionsRelatedByTidUsuCrea());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTipoIdentificacionsRelatedByTidUsuCrea()
	{
		$this->collTipoIdentificacionsRelatedByTidUsuCrea = array();
	}

	/**
	 * Gets an array of TipoIdentificacion objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related TipoIdentificacionsRelatedByTidUsuCrea from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TipoIdentificacion[]
	 * @throws     PropelException
	 */
	public function getTipoIdentificacionsRelatedByTidUsuCrea($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTipoIdentificacionsRelatedByTidUsuCrea === null) {
			if ($this->isNew()) {
			   $this->collTipoIdentificacionsRelatedByTidUsuCrea = array();
			} else {

				$criteria->add(TipoIdentificacionPeer::TID_USU_CREA, $this->usu_codigo);

				TipoIdentificacionPeer::addSelectColumns($criteria);
				$this->collTipoIdentificacionsRelatedByTidUsuCrea = TipoIdentificacionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TipoIdentificacionPeer::TID_USU_CREA, $this->usu_codigo);

				TipoIdentificacionPeer::addSelectColumns($criteria);
				if (!isset($this->lastTipoIdentificacionRelatedByTidUsuCreaCriteria) || !$this->lastTipoIdentificacionRelatedByTidUsuCreaCriteria->equals($criteria)) {
					$this->collTipoIdentificacionsRelatedByTidUsuCrea = TipoIdentificacionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTipoIdentificacionRelatedByTidUsuCreaCriteria = $criteria;
		return $this->collTipoIdentificacionsRelatedByTidUsuCrea;
	}

	/**
	 * Returns the number of related TipoIdentificacion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TipoIdentificacion objects.
	 * @throws     PropelException
	 */
	public function countTipoIdentificacionsRelatedByTidUsuCrea(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTipoIdentificacionsRelatedByTidUsuCrea === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TipoIdentificacionPeer::TID_USU_CREA, $this->usu_codigo);

				$count = TipoIdentificacionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TipoIdentificacionPeer::TID_USU_CREA, $this->usu_codigo);

				if (!isset($this->lastTipoIdentificacionRelatedByTidUsuCreaCriteria) || !$this->lastTipoIdentificacionRelatedByTidUsuCreaCriteria->equals($criteria)) {
					$count = TipoIdentificacionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTipoIdentificacionsRelatedByTidUsuCrea);
				}
			} else {
				$count = count($this->collTipoIdentificacionsRelatedByTidUsuCrea);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TipoIdentificacion object to this object
	 * through the TipoIdentificacion foreign key attribute.
	 *
	 * @param      TipoIdentificacion $l TipoIdentificacion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTipoIdentificacionRelatedByTidUsuCrea(TipoIdentificacion $l)
	{
		if ($this->collTipoIdentificacionsRelatedByTidUsuCrea === null) {
			$this->initTipoIdentificacionsRelatedByTidUsuCrea();
		}
		if (!in_array($l, $this->collTipoIdentificacionsRelatedByTidUsuCrea, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTipoIdentificacionsRelatedByTidUsuCrea, $l);
			$l->setUsuarioRelatedByTidUsuCrea($this);
		}
	}

	/**
	 * Clears out the collTipoIdentificacionsRelatedByTidUsuActualiza collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTipoIdentificacionsRelatedByTidUsuActualiza()
	 */
	public function clearTipoIdentificacionsRelatedByTidUsuActualiza()
	{
		$this->collTipoIdentificacionsRelatedByTidUsuActualiza = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTipoIdentificacionsRelatedByTidUsuActualiza collection (array).
	 *
	 * By default this just sets the collTipoIdentificacionsRelatedByTidUsuActualiza collection to an empty array (like clearcollTipoIdentificacionsRelatedByTidUsuActualiza());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTipoIdentificacionsRelatedByTidUsuActualiza()
	{
		$this->collTipoIdentificacionsRelatedByTidUsuActualiza = array();
	}

	/**
	 * Gets an array of TipoIdentificacion objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related TipoIdentificacionsRelatedByTidUsuActualiza from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TipoIdentificacion[]
	 * @throws     PropelException
	 */
	public function getTipoIdentificacionsRelatedByTidUsuActualiza($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTipoIdentificacionsRelatedByTidUsuActualiza === null) {
			if ($this->isNew()) {
			   $this->collTipoIdentificacionsRelatedByTidUsuActualiza = array();
			} else {

				$criteria->add(TipoIdentificacionPeer::TID_USU_ACTUALIZA, $this->usu_codigo);

				TipoIdentificacionPeer::addSelectColumns($criteria);
				$this->collTipoIdentificacionsRelatedByTidUsuActualiza = TipoIdentificacionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TipoIdentificacionPeer::TID_USU_ACTUALIZA, $this->usu_codigo);

				TipoIdentificacionPeer::addSelectColumns($criteria);
				if (!isset($this->lastTipoIdentificacionRelatedByTidUsuActualizaCriteria) || !$this->lastTipoIdentificacionRelatedByTidUsuActualizaCriteria->equals($criteria)) {
					$this->collTipoIdentificacionsRelatedByTidUsuActualiza = TipoIdentificacionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTipoIdentificacionRelatedByTidUsuActualizaCriteria = $criteria;
		return $this->collTipoIdentificacionsRelatedByTidUsuActualiza;
	}

	/**
	 * Returns the number of related TipoIdentificacion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TipoIdentificacion objects.
	 * @throws     PropelException
	 */
	public function countTipoIdentificacionsRelatedByTidUsuActualiza(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTipoIdentificacionsRelatedByTidUsuActualiza === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TipoIdentificacionPeer::TID_USU_ACTUALIZA, $this->usu_codigo);

				$count = TipoIdentificacionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TipoIdentificacionPeer::TID_USU_ACTUALIZA, $this->usu_codigo);

				if (!isset($this->lastTipoIdentificacionRelatedByTidUsuActualizaCriteria) || !$this->lastTipoIdentificacionRelatedByTidUsuActualizaCriteria->equals($criteria)) {
					$count = TipoIdentificacionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTipoIdentificacionsRelatedByTidUsuActualiza);
				}
			} else {
				$count = count($this->collTipoIdentificacionsRelatedByTidUsuActualiza);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TipoIdentificacion object to this object
	 * through the TipoIdentificacion foreign key attribute.
	 *
	 * @param      TipoIdentificacion $l TipoIdentificacion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTipoIdentificacionRelatedByTidUsuActualiza(TipoIdentificacion $l)
	{
		if ($this->collTipoIdentificacionsRelatedByTidUsuActualiza === null) {
			$this->initTipoIdentificacionsRelatedByTidUsuActualiza();
		}
		if (!in_array($l, $this->collTipoIdentificacionsRelatedByTidUsuActualiza, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTipoIdentificacionsRelatedByTidUsuActualiza, $l);
			$l->setUsuarioRelatedByTidUsuActualiza($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collCategoriaEquiposRelatedByCatUsuCrea) {
				foreach ((array) $this->collCategoriaEquiposRelatedByCatUsuCrea as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCategoriaEquiposRelatedByCatUsuActualiza) {
				foreach ((array) $this->collCategoriaEquiposRelatedByCatUsuActualiza as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCategoriaEventosRelatedByCatUsuCrea) {
				foreach ((array) $this->collCategoriaEventosRelatedByCatUsuCrea as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCategoriaEventosRelatedByCatUsuActualiza) {
				foreach ((array) $this->collCategoriaEventosRelatedByCatUsuActualiza as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmpleadosRelatedByEmplUsuCodigo) {
				foreach ((array) $this->collEmpleadosRelatedByEmplUsuCodigo as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmpleadosRelatedByEmplUsuCrea) {
				foreach ((array) $this->collEmpleadosRelatedByEmplUsuCrea as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmpleadosRelatedByEmplUsuActualiza) {
				foreach ((array) $this->collEmpleadosRelatedByEmplUsuActualiza as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmpresasRelatedByEmpUsuCrea) {
				foreach ((array) $this->collEmpresasRelatedByEmpUsuCrea as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmpresasRelatedByEmpUsuActualiza) {
				foreach ((array) $this->collEmpresasRelatedByEmpUsuActualiza as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEstadosRelatedByEstUsuCrea) {
				foreach ((array) $this->collEstadosRelatedByEstUsuCrea as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEstadosRelatedByEstUsuActualiza) {
				foreach ((array) $this->collEstadosRelatedByEstUsuActualiza as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEventosRelatedByEveUsuCrea) {
				foreach ((array) $this->collEventosRelatedByEveUsuCrea as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEventosRelatedByEveUsuActualiza) {
				foreach ((array) $this->collEventosRelatedByEveUsuActualiza as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEventoEnRegistrosRelatedByEvrgUsuCrea) {
				foreach ((array) $this->collEventoEnRegistrosRelatedByEvrgUsuCrea as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEventoEnRegistrosRelatedByEvrgUsuActualiza) {
				foreach ((array) $this->collEventoEnRegistrosRelatedByEvrgUsuActualiza as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEventoPorCategorias) {
				foreach ((array) $this->collEventoPorCategorias as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collIndicadorsRelatedByIndUsuCrea) {
				foreach ((array) $this->collIndicadorsRelatedByIndUsuCrea as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collIndicadorsRelatedByIndUsuActualiza) {
				foreach ((array) $this->collIndicadorsRelatedByIndUsuActualiza as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMaquinasRelatedByMaqUsuCrea) {
				foreach ((array) $this->collMaquinasRelatedByMaqUsuCrea as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMaquinasRelatedByMaqUsuActualiza) {
				foreach ((array) $this->collMaquinasRelatedByMaqUsuActualiza as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea) {
				foreach ((array) $this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza) {
				foreach ((array) $this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMetodosRelatedByMetUsuCrea) {
				foreach ((array) $this->collMetodosRelatedByMetUsuCrea as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMetodosRelatedByMetUsuActualiza) {
				foreach ((array) $this->collMetodosRelatedByMetUsuActualiza as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRegistroModificacions) {
				foreach ((array) $this->collRegistroModificacions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigo) {
				foreach ((array) $this->collRegistroUsoMaquinasRelatedByRumUsuCodigo as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino) {
				foreach ((array) $this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTipoIdentificacionsRelatedByTidUsuCrea) {
				foreach ((array) $this->collTipoIdentificacionsRelatedByTidUsuCrea as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTipoIdentificacionsRelatedByTidUsuActualiza) {
				foreach ((array) $this->collTipoIdentificacionsRelatedByTidUsuActualiza as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collCategoriaEquiposRelatedByCatUsuCrea = null;
		$this->collCategoriaEquiposRelatedByCatUsuActualiza = null;
		$this->collCategoriaEventosRelatedByCatUsuCrea = null;
		$this->collCategoriaEventosRelatedByCatUsuActualiza = null;
		$this->collEmpleadosRelatedByEmplUsuCodigo = null;
		$this->collEmpleadosRelatedByEmplUsuCrea = null;
		$this->collEmpleadosRelatedByEmplUsuActualiza = null;
		$this->collEmpresasRelatedByEmpUsuCrea = null;
		$this->collEmpresasRelatedByEmpUsuActualiza = null;
		$this->collEstadosRelatedByEstUsuCrea = null;
		$this->collEstadosRelatedByEstUsuActualiza = null;
		$this->collEventosRelatedByEveUsuCrea = null;
		$this->collEventosRelatedByEveUsuActualiza = null;
		$this->collEventoEnRegistrosRelatedByEvrgUsuCrea = null;
		$this->collEventoEnRegistrosRelatedByEvrgUsuActualiza = null;
		$this->collEventoPorCategorias = null;
		$this->collIndicadorsRelatedByIndUsuCrea = null;
		$this->collIndicadorsRelatedByIndUsuActualiza = null;
		$this->collMaquinasRelatedByMaqUsuCrea = null;
		$this->collMaquinasRelatedByMaqUsuActualiza = null;
		$this->collMetaAnualXIndicadorsRelatedByMeaUsuCrea = null;
		$this->collMetaAnualXIndicadorsRelatedByMeaUsuActualiza = null;
		$this->collMetodosRelatedByMetUsuCrea = null;
		$this->collMetodosRelatedByMetUsuActualiza = null;
		$this->collRegistroModificacions = null;
		$this->collRegistroUsoMaquinasRelatedByRumUsuCodigo = null;
		$this->collRegistroUsoMaquinasRelatedByRumUsuCodigoElimino = null;
		$this->collTipoIdentificacionsRelatedByTidUsuCrea = null;
		$this->collTipoIdentificacionsRelatedByTidUsuActualiza = null;
			$this->aPerfil = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseUsuario:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseUsuario::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseUsuario
